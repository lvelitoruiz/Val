{"version":3,"file":"component---src-pages-department-tsx-02d9fc9519ddc72e8e88.js","mappings":"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","sources":["webpack://boiler-plate/./node_modules/aos/dist/aos.js","webpack://boiler-plate/./node_modules/extend/index.js","webpack://boiler-plate/./src/components/TitleFix.tsx","webpack://boiler-plate/./src/components/BannerDepart.tsx","webpack://boiler-plate/./src/components/HoverImg.tsx","webpack://boiler-plate/./node_modules/hast-util-whitespace/lib/index.js","webpack://boiler-plate/./node_modules/property-information/lib/util/schema.js","webpack://boiler-plate/./node_modules/property-information/lib/util/merge.js","webpack://boiler-plate/./node_modules/property-information/lib/normalize.js","webpack://boiler-plate/./node_modules/property-information/lib/util/info.js","webpack://boiler-plate/./node_modules/property-information/lib/util/types.js","webpack://boiler-plate/./node_modules/property-information/lib/util/defined-info.js","webpack://boiler-plate/./node_modules/property-information/lib/util/create.js","webpack://boiler-plate/./node_modules/property-information/lib/xlink.js","webpack://boiler-plate/./node_modules/property-information/lib/xml.js","webpack://boiler-plate/./node_modules/property-information/lib/util/case-sensitive-transform.js","webpack://boiler-plate/./node_modules/property-information/lib/util/case-insensitive-transform.js","webpack://boiler-plate/./node_modules/property-information/lib/xmlns.js","webpack://boiler-plate/./node_modules/property-information/lib/aria.js","webpack://boiler-plate/./node_modules/property-information/lib/html.js","webpack://boiler-plate/./node_modules/property-information/lib/svg.js","webpack://boiler-plate/./node_modules/property-information/index.js","webpack://boiler-plate/./node_modules/property-information/lib/find.js","webpack://boiler-plate/./node_modules/property-information/lib/hast-to-react.js","webpack://boiler-plate/./node_modules/style-to-object/index.mjs","webpack://boiler-plate/./node_modules/unist-util-position/lib/index.js","webpack://boiler-plate/./node_modules/unist-util-stringify-position/lib/index.js","webpack://boiler-plate/./node_modules/vfile-message/lib/index.js","webpack://boiler-plate/./node_modules/hast-util-to-jsx-runtime/lib/index.js","webpack://boiler-plate/./node_modules/comma-separated-tokens/index.js","webpack://boiler-plate/./node_modules/space-separated-tokens/index.js","webpack://boiler-plate/./node_modules/html-url-attributes/lib/index.js","webpack://boiler-plate/./node_modules/micromark-util-character/index.js","webpack://boiler-plate/./node_modules/micromark-util-encode/index.js","webpack://boiler-plate/./node_modules/micromark-util-sanitize-uri/index.js","webpack://boiler-plate/./node_modules/mdast-util-to-string/lib/index.js","webpack://boiler-plate/./node_modules/micromark-util-chunked/index.js","webpack://boiler-plate/./node_modules/micromark-util-subtokenize/index.js","webpack://boiler-plate/./node_modules/micromark-util-combine-extensions/index.js","webpack://boiler-plate/./node_modules/micromark-factory-space/index.js","webpack://boiler-plate/./node_modules/micromark/lib/initialize/content.js","webpack://boiler-plate/./node_modules/micromark/lib/initialize/document.js","webpack://boiler-plate/./node_modules/micromark-core-commonmark/lib/blank-line.js","webpack://boiler-plate/./node_modules/micromark-core-commonmark/lib/content.js","webpack://boiler-plate/./node_modules/micromark/lib/initialize/flow.js","webpack://boiler-plate/./node_modules/micromark/lib/initialize/text.js","webpack://boiler-plate/./node_modules/micromark-util-resolve-all/index.js","webpack://boiler-plate/./node_modules/micromark/lib/create-tokenizer.js","webpack://boiler-plate/./node_modules/micromark-core-commonmark/lib/thematic-break.js","webpack://boiler-plate/./node_modules/micromark-core-commonmark/lib/list.js","webpack://boiler-plate/./node_modules/micromark-core-commonmark/lib/block-quote.js","webpack://boiler-plate/./node_modules/micromark-factory-destination/index.js","webpack://boiler-plate/./node_modules/micromark-factory-label/index.js","webpack://boiler-plate/./node_modules/micromark-factory-title/index.js","webpack://boiler-plate/./node_modules/micromark-factory-whitespace/index.js","webpack://boiler-plate/./node_modules/micromark-util-normalize-identifier/index.js","webpack://boiler-plate/./node_modules/micromark-core-commonmark/lib/definition.js","webpack://boiler-plate/./node_modules/micromark-core-commonmark/lib/code-indented.js","webpack://boiler-plate/./node_modules/micromark-core-commonmark/lib/heading-atx.js","webpack://boiler-plate/./node_modules/micromark-core-commonmark/lib/setext-underline.js","webpack://boiler-plate/./node_modules/micromark-util-html-tag-name/index.js","webpack://boiler-plate/./node_modules/micromark-core-commonmark/lib/html-flow.js","webpack://boiler-plate/./node_modules/micromark-core-commonmark/lib/code-fenced.js","webpack://boiler-plate/./node_modules/decode-named-character-reference/index.dom.js","webpack://boiler-plate/./node_modules/micromark-core-commonmark/lib/character-reference.js","webpack://boiler-plate/./node_modules/micromark-core-commonmark/lib/character-escape.js","webpack://boiler-plate/./node_modules/micromark-core-commonmark/lib/line-ending.js","webpack://boiler-plate/./node_modules/micromark-core-commonmark/lib/label-end.js","webpack://boiler-plate/./node_modules/micromark-core-commonmark/lib/label-start-image.js","webpack://boiler-plate/./node_modules/micromark-util-classify-character/index.js","webpack://boiler-plate/./node_modules/micromark-core-commonmark/lib/attention.js","webpack://boiler-plate/./node_modules/micromark-core-commonmark/lib/autolink.js","webpack://boiler-plate/./node_modules/micromark-core-commonmark/lib/html-text.js","webpack://boiler-plate/./node_modules/micromark-core-commonmark/lib/label-start-link.js","webpack://boiler-plate/./node_modules/micromark-core-commonmark/lib/hard-break-escape.js","webpack://boiler-plate/./node_modules/micromark-core-commonmark/lib/code-text.js","webpack://boiler-plate/./node_modules/micromark/lib/constructs.js","webpack://boiler-plate/./node_modules/micromark/lib/parse.js","webpack://boiler-plate/./node_modules/micromark/lib/preprocess.js","webpack://boiler-plate/./node_modules/micromark-util-decode-numeric-character-reference/index.js","webpack://boiler-plate/./node_modules/micromark-util-decode-string/index.js","webpack://boiler-plate/./node_modules/mdast-util-from-markdown/lib/index.js","webpack://boiler-plate/./node_modules/micromark/lib/postprocess.js","webpack://boiler-plate/./node_modules/remark-parse/lib/index.js","webpack://boiler-plate/./node_modules/@ungap/structured-clone/esm/types.js","webpack://boiler-plate/./node_modules/@ungap/structured-clone/esm/deserialize.js","webpack://boiler-plate/./node_modules/@ungap/structured-clone/esm/serialize.js","webpack://boiler-plate/./node_modules/@ungap/structured-clone/esm/index.js","webpack://boiler-plate/./node_modules/mdast-util-to-hast/lib/footer.js","webpack://boiler-plate/./node_modules/unist-util-is/lib/index.js","webpack://boiler-plate/./node_modules/unist-util-visit-parents/lib/index.js","webpack://boiler-plate/./node_modules/unist-util-visit/lib/index.js","webpack://boiler-plate/./node_modules/mdast-util-to-hast/lib/revert.js","webpack://boiler-plate/./node_modules/mdast-util-to-hast/lib/handlers/list-item.js","webpack://boiler-plate/./node_modules/trim-lines/index.js","webpack://boiler-plate/./node_modules/mdast-util-to-hast/lib/handlers/index.js","webpack://boiler-plate/./node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","webpack://boiler-plate/./node_modules/mdast-util-to-hast/lib/handlers/break.js","webpack://boiler-plate/./node_modules/mdast-util-to-hast/lib/handlers/code.js","webpack://boiler-plate/./node_modules/mdast-util-to-hast/lib/handlers/delete.js","webpack://boiler-plate/./node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","webpack://boiler-plate/./node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","webpack://boiler-plate/./node_modules/mdast-util-to-hast/lib/handlers/heading.js","webpack://boiler-plate/./node_modules/mdast-util-to-hast/lib/handlers/html.js","webpack://boiler-plate/./node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","webpack://boiler-plate/./node_modules/mdast-util-to-hast/lib/handlers/image.js","webpack://boiler-plate/./node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","webpack://boiler-plate/./node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","webpack://boiler-plate/./node_modules/mdast-util-to-hast/lib/handlers/link.js","webpack://boiler-plate/./node_modules/mdast-util-to-hast/lib/handlers/list.js","webpack://boiler-plate/./node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","webpack://boiler-plate/./node_modules/mdast-util-to-hast/lib/handlers/root.js","webpack://boiler-plate/./node_modules/mdast-util-to-hast/lib/handlers/strong.js","webpack://boiler-plate/./node_modules/mdast-util-to-hast/lib/handlers/table.js","webpack://boiler-plate/./node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","webpack://boiler-plate/./node_modules/mdast-util-to-hast/lib/handlers/table-row.js","webpack://boiler-plate/./node_modules/mdast-util-to-hast/lib/handlers/text.js","webpack://boiler-plate/./node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","webpack://boiler-plate/./node_modules/mdast-util-to-hast/lib/state.js","webpack://boiler-plate/./node_modules/mdast-util-to-hast/lib/index.js","webpack://boiler-plate/./node_modules/remark-rehype/lib/index.js","webpack://boiler-plate/./node_modules/bail/index.js","webpack://boiler-plate/./node_modules/is-plain-obj/index.js","webpack://boiler-plate/./node_modules/trough/index.js","webpack://boiler-plate/./node_modules/vfile/lib/minpath.browser.js","webpack://boiler-plate/./node_modules/vfile/lib/minproc.browser.js","webpack://boiler-plate/./node_modules/vfile/lib/minurl.shared.js","webpack://boiler-plate/./node_modules/vfile/lib/minurl.browser.js","webpack://boiler-plate/./node_modules/vfile/lib/index.js","webpack://boiler-plate/./node_modules/unified/lib/callable-instance.js","webpack://boiler-plate/./node_modules/unified/lib/index.js","webpack://boiler-plate/./node_modules/react-markdown/lib/index.js","webpack://boiler-plate/./src/components/InfoDepart.tsx","webpack://boiler-plate/./src/pages/department.tsx","webpack://boiler-plate/./node_modules/inline-style-parser/index.js","webpack://boiler-plate/./node_modules/style-to-object/index.js"],"sourcesContent":["!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?exports.AOS=t():e.AOS=t()}(this,function(){return function(e){function t(o){if(n[o])return n[o].exports;var i=n[o]={exports:{},id:o,loaded:!1};return e[o].call(i.exports,i,i.exports,t),i.loaded=!0,i.exports}var n={};return t.m=e,t.c=n,t.p=\"dist/\",t(0)}([function(e,t,n){\"use strict\";function o(e){return e&&e.__esModule?e:{default:e}}var i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},r=n(1),a=(o(r),n(6)),u=o(a),c=n(7),s=o(c),f=n(8),d=o(f),l=n(9),p=o(l),m=n(10),b=o(m),v=n(11),y=o(v),g=n(14),h=o(g),w=[],k=!1,x={offset:120,delay:0,easing:\"ease\",duration:400,disable:!1,once:!1,startEvent:\"DOMContentLoaded\",throttleDelay:99,debounceDelay:50,disableMutationObserver:!1},j=function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(e&&(k=!0),k)return w=(0,y.default)(w,x),(0,b.default)(w,x.once),w},O=function(){w=(0,h.default)(),j()},M=function(){w.forEach(function(e,t){e.node.removeAttribute(\"data-aos\"),e.node.removeAttribute(\"data-aos-easing\"),e.node.removeAttribute(\"data-aos-duration\"),e.node.removeAttribute(\"data-aos-delay\")})},S=function(e){return e===!0||\"mobile\"===e&&p.default.mobile()||\"phone\"===e&&p.default.phone()||\"tablet\"===e&&p.default.tablet()||\"function\"==typeof e&&e()===!0},_=function(e){x=i(x,e),w=(0,h.default)();var t=document.all&&!window.atob;return S(x.disable)||t?M():(x.disableMutationObserver||d.default.isSupported()||(console.info('\\n      aos: MutationObserver is not supported on this browser,\\n      code mutations observing has been disabled.\\n      You may have to call \"refreshHard()\" by yourself.\\n    '),x.disableMutationObserver=!0),document.querySelector(\"body\").setAttribute(\"data-aos-easing\",x.easing),document.querySelector(\"body\").setAttribute(\"data-aos-duration\",x.duration),document.querySelector(\"body\").setAttribute(\"data-aos-delay\",x.delay),\"DOMContentLoaded\"===x.startEvent&&[\"complete\",\"interactive\"].indexOf(document.readyState)>-1?j(!0):\"load\"===x.startEvent?window.addEventListener(x.startEvent,function(){j(!0)}):document.addEventListener(x.startEvent,function(){j(!0)}),window.addEventListener(\"resize\",(0,s.default)(j,x.debounceDelay,!0)),window.addEventListener(\"orientationchange\",(0,s.default)(j,x.debounceDelay,!0)),window.addEventListener(\"scroll\",(0,u.default)(function(){(0,b.default)(w,x.once)},x.throttleDelay)),x.disableMutationObserver||d.default.ready(\"[data-aos]\",O),w)};e.exports={init:_,refresh:j,refreshHard:O}},function(e,t){},,,,,function(e,t){(function(t){\"use strict\";function n(e,t,n){function o(t){var n=b,o=v;return b=v=void 0,k=t,g=e.apply(o,n)}function r(e){return k=e,h=setTimeout(f,t),M?o(e):g}function a(e){var n=e-w,o=e-k,i=t-n;return S?j(i,y-o):i}function c(e){var n=e-w,o=e-k;return void 0===w||n>=t||n<0||S&&o>=y}function f(){var e=O();return c(e)?d(e):void(h=setTimeout(f,a(e)))}function d(e){return h=void 0,_&&b?o(e):(b=v=void 0,g)}function l(){void 0!==h&&clearTimeout(h),k=0,b=w=v=h=void 0}function p(){return void 0===h?g:d(O())}function m(){var e=O(),n=c(e);if(b=arguments,v=this,w=e,n){if(void 0===h)return r(w);if(S)return h=setTimeout(f,t),o(w)}return void 0===h&&(h=setTimeout(f,t)),g}var b,v,y,g,h,w,k=0,M=!1,S=!1,_=!0;if(\"function\"!=typeof e)throw new TypeError(s);return t=u(t)||0,i(n)&&(M=!!n.leading,S=\"maxWait\"in n,y=S?x(u(n.maxWait)||0,t):y,_=\"trailing\"in n?!!n.trailing:_),m.cancel=l,m.flush=p,m}function o(e,t,o){var r=!0,a=!0;if(\"function\"!=typeof e)throw new TypeError(s);return i(o)&&(r=\"leading\"in o?!!o.leading:r,a=\"trailing\"in o?!!o.trailing:a),n(e,t,{leading:r,maxWait:t,trailing:a})}function i(e){var t=\"undefined\"==typeof e?\"undefined\":c(e);return!!e&&(\"object\"==t||\"function\"==t)}function r(e){return!!e&&\"object\"==(\"undefined\"==typeof e?\"undefined\":c(e))}function a(e){return\"symbol\"==(\"undefined\"==typeof e?\"undefined\":c(e))||r(e)&&k.call(e)==d}function u(e){if(\"number\"==typeof e)return e;if(a(e))return f;if(i(e)){var t=\"function\"==typeof e.valueOf?e.valueOf():e;e=i(t)?t+\"\":t}if(\"string\"!=typeof e)return 0===e?e:+e;e=e.replace(l,\"\");var n=m.test(e);return n||b.test(e)?v(e.slice(2),n?2:8):p.test(e)?f:+e}var c=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&\"function\"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?\"symbol\":typeof e},s=\"Expected a function\",f=NaN,d=\"[object Symbol]\",l=/^\\s+|\\s+$/g,p=/^[-+]0x[0-9a-f]+$/i,m=/^0b[01]+$/i,b=/^0o[0-7]+$/i,v=parseInt,y=\"object\"==(\"undefined\"==typeof t?\"undefined\":c(t))&&t&&t.Object===Object&&t,g=\"object\"==(\"undefined\"==typeof self?\"undefined\":c(self))&&self&&self.Object===Object&&self,h=y||g||Function(\"return this\")(),w=Object.prototype,k=w.toString,x=Math.max,j=Math.min,O=function(){return h.Date.now()};e.exports=o}).call(t,function(){return this}())},function(e,t){(function(t){\"use strict\";function n(e,t,n){function i(t){var n=b,o=v;return b=v=void 0,O=t,g=e.apply(o,n)}function r(e){return O=e,h=setTimeout(f,t),M?i(e):g}function u(e){var n=e-w,o=e-O,i=t-n;return S?x(i,y-o):i}function s(e){var n=e-w,o=e-O;return void 0===w||n>=t||n<0||S&&o>=y}function f(){var e=j();return s(e)?d(e):void(h=setTimeout(f,u(e)))}function d(e){return h=void 0,_&&b?i(e):(b=v=void 0,g)}function l(){void 0!==h&&clearTimeout(h),O=0,b=w=v=h=void 0}function p(){return void 0===h?g:d(j())}function m(){var e=j(),n=s(e);if(b=arguments,v=this,w=e,n){if(void 0===h)return r(w);if(S)return h=setTimeout(f,t),i(w)}return void 0===h&&(h=setTimeout(f,t)),g}var b,v,y,g,h,w,O=0,M=!1,S=!1,_=!0;if(\"function\"!=typeof e)throw new TypeError(c);return t=a(t)||0,o(n)&&(M=!!n.leading,S=\"maxWait\"in n,y=S?k(a(n.maxWait)||0,t):y,_=\"trailing\"in n?!!n.trailing:_),m.cancel=l,m.flush=p,m}function o(e){var t=\"undefined\"==typeof e?\"undefined\":u(e);return!!e&&(\"object\"==t||\"function\"==t)}function i(e){return!!e&&\"object\"==(\"undefined\"==typeof e?\"undefined\":u(e))}function r(e){return\"symbol\"==(\"undefined\"==typeof e?\"undefined\":u(e))||i(e)&&w.call(e)==f}function a(e){if(\"number\"==typeof e)return e;if(r(e))return s;if(o(e)){var t=\"function\"==typeof e.valueOf?e.valueOf():e;e=o(t)?t+\"\":t}if(\"string\"!=typeof e)return 0===e?e:+e;e=e.replace(d,\"\");var n=p.test(e);return n||m.test(e)?b(e.slice(2),n?2:8):l.test(e)?s:+e}var u=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&\"function\"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?\"symbol\":typeof e},c=\"Expected a function\",s=NaN,f=\"[object Symbol]\",d=/^\\s+|\\s+$/g,l=/^[-+]0x[0-9a-f]+$/i,p=/^0b[01]+$/i,m=/^0o[0-7]+$/i,b=parseInt,v=\"object\"==(\"undefined\"==typeof t?\"undefined\":u(t))&&t&&t.Object===Object&&t,y=\"object\"==(\"undefined\"==typeof self?\"undefined\":u(self))&&self&&self.Object===Object&&self,g=v||y||Function(\"return this\")(),h=Object.prototype,w=h.toString,k=Math.max,x=Math.min,j=function(){return g.Date.now()};e.exports=n}).call(t,function(){return this}())},function(e,t){\"use strict\";function n(e){var t=void 0,o=void 0,i=void 0;for(t=0;t<e.length;t+=1){if(o=e[t],o.dataset&&o.dataset.aos)return!0;if(i=o.children&&n(o.children))return!0}return!1}function o(){return window.MutationObserver||window.WebKitMutationObserver||window.MozMutationObserver}function i(){return!!o()}function r(e,t){var n=window.document,i=o(),r=new i(a);u=t,r.observe(n.documentElement,{childList:!0,subtree:!0,removedNodes:!0})}function a(e){e&&e.forEach(function(e){var t=Array.prototype.slice.call(e.addedNodes),o=Array.prototype.slice.call(e.removedNodes),i=t.concat(o);if(n(i))return u()})}Object.defineProperty(t,\"__esModule\",{value:!0});var u=function(){};t.default={isSupported:i,ready:r}},function(e,t){\"use strict\";function n(e,t){if(!(e instanceof t))throw new TypeError(\"Cannot call a class as a function\")}function o(){return navigator.userAgent||navigator.vendor||window.opera||\"\"}Object.defineProperty(t,\"__esModule\",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,\"value\"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),r=/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i,a=/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i,u=/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i,c=/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i,s=function(){function e(){n(this,e)}return i(e,[{key:\"phone\",value:function(){var e=o();return!(!r.test(e)&&!a.test(e.substr(0,4)))}},{key:\"mobile\",value:function(){var e=o();return!(!u.test(e)&&!c.test(e.substr(0,4)))}},{key:\"tablet\",value:function(){return this.mobile()&&!this.phone()}}]),e}();t.default=new s},function(e,t){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=function(e,t,n){var o=e.node.getAttribute(\"data-aos-once\");t>e.position?e.node.classList.add(\"aos-animate\"):\"undefined\"!=typeof o&&(\"false\"===o||!n&&\"true\"!==o)&&e.node.classList.remove(\"aos-animate\")},o=function(e,t){var o=window.pageYOffset,i=window.innerHeight;e.forEach(function(e,r){n(e,i+o,t)})};t.default=o},function(e,t,n){\"use strict\";function o(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,\"__esModule\",{value:!0});var i=n(12),r=o(i),a=function(e,t){return e.forEach(function(e,n){e.node.classList.add(\"aos-init\"),e.position=(0,r.default)(e.node,t.offset)}),e};t.default=a},function(e,t,n){\"use strict\";function o(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,\"__esModule\",{value:!0});var i=n(13),r=o(i),a=function(e,t){var n=0,o=0,i=window.innerHeight,a={offset:e.getAttribute(\"data-aos-offset\"),anchor:e.getAttribute(\"data-aos-anchor\"),anchorPlacement:e.getAttribute(\"data-aos-anchor-placement\")};switch(a.offset&&!isNaN(a.offset)&&(o=parseInt(a.offset)),a.anchor&&document.querySelectorAll(a.anchor)&&(e=document.querySelectorAll(a.anchor)[0]),n=(0,r.default)(e).top,a.anchorPlacement){case\"top-bottom\":break;case\"center-bottom\":n+=e.offsetHeight/2;break;case\"bottom-bottom\":n+=e.offsetHeight;break;case\"top-center\":n+=i/2;break;case\"bottom-center\":n+=i/2+e.offsetHeight;break;case\"center-center\":n+=i/2+e.offsetHeight/2;break;case\"top-top\":n+=i;break;case\"bottom-top\":n+=e.offsetHeight+i;break;case\"center-top\":n+=e.offsetHeight/2+i}return a.anchorPlacement||a.offset||isNaN(t)||(o=t),n+o};t.default=a},function(e,t){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=function(e){for(var t=0,n=0;e&&!isNaN(e.offsetLeft)&&!isNaN(e.offsetTop);)t+=e.offsetLeft-(\"BODY\"!=e.tagName?e.scrollLeft:0),n+=e.offsetTop-(\"BODY\"!=e.tagName?e.scrollTop:0),e=e.offsetParent;return{top:n,left:t}};t.default=n},function(e,t){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=function(e){return e=e||document.querySelectorAll(\"[data-aos]\"),Array.prototype.map.call(e,function(e){return{node:e}})};t.default=n}])});","'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","import React from \"react\";\n\ninterface ProjectProps {\n  title: string;\n  text: string;\n  extraStyles?: string;\n}\n\nconst TitleFix: React.FC<ProjectProps> = ({\n  title,\n  text,\n  extraStyles\n}) => {\n  return (\n    <div>\n      <div className={`w-full px-6 lg:px-0 mx-auto mb-14 ${extraStyles}`}>\n        <h1 className=\"pb-4 leading-tight text-[--color-secondary] text-center text-[30px] lg:text-[44px] uppercase\">\n          {title}\n        </h1>\n        <p className=\"text-center font-light text-[--color-secondary]\">\n          <span className=\"font-normal\">\n            {text}\n          </span>\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default TitleFix;\n","import React from \"react\";\n\n// import bannerDepartment from \"../images/banner-department.jpg\";\nimport logoTopLife from \"../images/logo-top-life.svg\";\n\nimport { LinkedIn } from \"iconoir-react\";\nimport Button from \"../components/Button\";\n\n\nconst BannerDepart = ({ objectDepa }: any) => {\n\n  const handleCustomClick = (event: string) => {\n    console.log(\"custom click: \", event);\n  };\n  return (\n    <>\n      <div className=\"h-[509px] md:h-[790px] w-full\">\n        <img\n          className=\"w-full h-full object-cover\"\n          src={objectDepa.bannerDepartment}\n          alt=\"\"\n        />\n      </div>\n      <div className=\"container mx-auto px-6 lg:px-0\">\n        <div className=\"bg-[--gray] w-full lg:h-[168px] mt-[-84px] items-start gap-4 rounded relative flex flex-col md:flex-row lg:items-center md:justify-between p-6 lg:py-0 lg:px-10\">\n          <img className=\"h-[50px] lg:h-[96px]\" src={objectDepa.logo} alt=\"\" />\n          <div className=\"flex w-full md:w-fit flex-col md:items-end lg:flex-row lg:items-center gap-5 lg:gap-10\">\n            <div className=\"flex flex-col md:flex-row lg:items-center gap-2 md:gap-10\">\n              <div className=\"flex items-center gap-4\">\n                <LinkedIn color=\"#313E48\" height={24} width={24} />\n                <div className=\"lg:max-w-[146px]\">\n                  <p className=\"text-sm text-[--color-secondary] font-light\" dangerouslySetInnerHTML={{ __html: objectDepa.direction }}>\n                  </p>\n                </div>\n              </div>\n              <div className=\"flex items-center gap-4\">\n                <LinkedIn color=\"#313E48\" height={24} width={24} />\n                <div className=\"lg:max-w-[146px]\">\n                  <p className=\"text-sm text-[--color-secondary] font-light\" dangerouslySetInnerHTML={{ __html: objectDepa.nocuartos }}>\n                  </p>\n                </div>\n              </div>\n              <div className=\"flex items-center gap-4\">\n                <LinkedIn color=\"#313E48\" height={24} width={24} />\n                <div className=\"lg:max-w-[146px]\">\n                  <p className=\"text-sm text-[--color-secondary] font-light\" dangerouslySetInnerHTML={{ __html: objectDepa.area }}>\n                  </p>\n                </div>\n              </div>\n            </div>\n            <Button\n              label={objectDepa.btn}\n              extraStyles=\"btn-primary px-10 h-[56px]\"\n              customClick={(event) => handleCustomClick(event)}\n            />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default BannerDepart;\n","import React, { useEffect } from \"react\";\nimport AOS from 'aos';\n\nimport 'aos/dist/aos.css';\ninterface ProjectProps {\n  imgUrl: string;\n  info: string;\n  imgStyles?: string;\n  blockStyles?: string;\n}\nconst Agent: React.FC<ProjectProps> = ({ imgUrl, info, imgStyles, blockStyles }) => {\n  \n  useEffect(() => {\n    AOS.init();\n  },[])\n  \n  return (\n    <div data-aos=\"fade-down\" data-aos-easing=\"linear\" data-aos-duration=\"500\" className={`relative ${blockStyles}`}>\n      <div className={`relative ${imgStyles}`}>\n        <img className=\"w-full h-full object-cover rounded\" src={imgUrl} alt=\"\" />\n        <div className=\"support-item rounded absolute top-0 left-0 right-0 bottom-0 py-4 px-[25px] lg:px-[26px] overflow-hidden lg:py-[32px] flex flex-col items-start justify-end cursor-pointer\">\n          <div className=\"support-item--text\">\n            <div className=\"support-item--paragraph\">\n              <p className=\"text-white font-light\">{info}</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Agent;\n","/**\n * @typedef {import('hast').Nodes} Nodes\n */\n\n// HTML whitespace expression.\n// See <https://infra.spec.whatwg.org/#ascii-whitespace>.\nconst re = /[ \\t\\n\\f\\r]/g\n\n/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {Nodes | string} thing\n *   Thing to check (`Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`); if a node is passed it must be a `Text` node,\n *   whose `value` field is checked.\n */\nexport function whitespace(thing) {\n  return typeof thing === 'object'\n    ? thing.type === 'text'\n      ? empty(thing.value)\n      : false\n    : empty(thing)\n}\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction empty(value) {\n  return value.replace(re, '') === ''\n}\n","/**\n * @typedef {import('./info.js').Info} Info\n * @typedef {Record<string, Info>} Properties\n * @typedef {Record<string, string>} Normal\n */\n\nexport class Schema {\n  /**\n   * @constructor\n   * @param {Properties} property\n   * @param {Normal} normal\n   * @param {string} [space]\n   */\n  constructor(property, normal, space) {\n    this.property = property\n    this.normal = normal\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\n/** @type {Properties} */\nSchema.prototype.property = {}\n/** @type {Normal} */\nSchema.prototype.normal = {}\n/** @type {string|null} */\nSchema.prototype.space = null\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {Schema[]} definitions\n * @param {string} [space]\n * @returns {Schema}\n */\nexport function merge(definitions, space) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  let index = -1\n\n  while (++index < definitions.length) {\n    Object.assign(property, definitions[index].property)\n    Object.assign(normal, definitions[index].normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * @param {string} value\n * @returns {string}\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","export class Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   */\n  constructor(property, attribute) {\n    /** @type {string} */\n    this.property = property\n    /** @type {string} */\n    this.attribute = attribute\n  }\n}\n\n/** @type {string|null} */\nInfo.prototype.space = null\nInfo.prototype.boolean = false\nInfo.prototype.booleanish = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.number = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.spaceSeparated = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.defined = false\n","let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","import {Info} from './info.js'\nimport * as types from './types.js'\n\n/** @type {Array<keyof types>} */\n// @ts-expect-error: hush.\nconst checks = Object.keys(types)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   * @param {number|null} [mask]\n   * @param {string} [space]\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @param {DefinedInfo} values\n * @param {string} key\n * @param {unknown} value\n */\nfunction mark(values, key, value) {\n  if (value) {\n    // @ts-expect-error: assume `value` matches the expected value of `key`.\n    values[key] = value\n  }\n}\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n *\n * @typedef {Record<string, string>} Attributes\n *\n * @typedef {Object} Definition\n * @property {Record<string, number|null>} properties\n * @property {(attributes: Attributes, property: string) => string} transform\n * @property {string} [space]\n * @property {Attributes} [attributes]\n * @property {Array<string>} [mustUseProperty]\n */\n\nimport {normalize} from '../normalize.js'\nimport {Schema} from './schema.js'\nimport {DefinedInfo} from './defined-info.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Definition} definition\n * @returns {Schema}\n */\nexport function create(definition) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  /** @type {string} */\n  let prop\n\n  for (prop in definition.properties) {\n    if (own.call(definition.properties, prop)) {\n      const value = definition.properties[prop]\n      const info = new DefinedInfo(\n        prop,\n        definition.transform(definition.attributes || {}, prop),\n        value,\n        definition.space\n      )\n\n      if (\n        definition.mustUseProperty &&\n        definition.mustUseProperty.includes(prop)\n      ) {\n        info.mustUseProperty = true\n      }\n\n      property[prop] = info\n\n      normal[normalize(prop)] = prop\n      normal[normalize(info.attribute)] = prop\n    }\n  }\n\n  return new Schema(property, normal, definition.space)\n}\n","import {create} from './util/create.js'\n\nexport const xlink = create({\n  space: 'xlink',\n  transform(_, prop) {\n    return 'xlink:' + prop.slice(5).toLowerCase()\n  },\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  }\n})\n","import {create} from './util/create.js'\n\nexport const xml = create({\n  space: 'xml',\n  transform(_, prop) {\n    return 'xml:' + prop.slice(3).toLowerCase()\n  },\n  properties: {xmlLang: null, xmlBase: null, xmlSpace: null}\n})\n","/**\n * @param {Record<string, string>} attributes\n * @param {string} attribute\n * @returns {string}\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n * @param {string} property\n * @returns {string}\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const xmlns = create({\n  space: 'xmlns',\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  transform: caseInsensitiveTransform,\n  properties: {xmlns: null, xmlnsXLink: null}\n})\n","import {booleanish, number, spaceSeparated} from './util/types.js'\nimport {create} from './util/create.js'\n\nexport const aria = create({\n  transform(_, prop) {\n    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()\n  },\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  }\n})\n","import {\n  boolean,\n  overloadedBoolean,\n  booleanish,\n  number,\n  spaceSeparated,\n  commaSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const html = create({\n  space: 'html',\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  transform: caseInsensitiveTransform,\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    blocking: spaceSeparated,\n    capture: boolean,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    fetchPriority: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: boolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inert: boolean,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    popover: null,\n    popoverTarget: null,\n    popoverTargetAction: null,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  }\n})\n","import {\n  boolean,\n  number,\n  spaceSeparated,\n  commaSeparated,\n  commaOrSpaceSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseSensitiveTransform} from './util/case-sensitive-transform.js'\n\nexport const svg = create({\n  space: 'svg',\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    transformOrigin: 'transform-origin',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  transform: caseSensitiveTransform,\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    transformOrigin: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  }\n})\n","/**\n * @typedef {import('./lib/util/info.js').Info} Info\n * @typedef {import('./lib/util/schema.js').Schema} Schema\n */\n\nimport {merge} from './lib/util/merge.js'\nimport {xlink} from './lib/xlink.js'\nimport {xml} from './lib/xml.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\n\nexport {find} from './lib/find.js'\nexport {hastToReact} from './lib/hast-to-react.js'\nexport {normalize} from './lib/normalize.js'\nexport const html = merge([xml, xlink, xmlns, aria, htmlBase], 'html')\nexport const svg = merge([xml, xlink, xmlns, aria, svgBase], 'svg')\n","/**\n * @typedef {import('./util/schema.js').Schema} Schema\n */\n\nimport {normalize} from './normalize.js'\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\n\nconst valid = /^data[-\\w.:]+$/i\nconst dash = /-[a-z]/g\nconst cap = /[A-Z]/g\n\n/**\n * @param {Schema} schema\n * @param {string} value\n * @returns {Info}\n */\nexport function find(schema, value) {\n  const normal = normalize(value)\n  let prop = value\n  let Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase)\n      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4)\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab)\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes\n        }\n\n        value = 'data' + dashes\n      }\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(prop, value)\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","/**\n * `hast` is close to `React`, but differs in a couple of cases.\n *\n * To get a React property from a hast property, check if it is in\n * `hastToReact`, if it is, then use the corresponding value,\n * otherwise, use the hast property.\n *\n * @type {Record<string, string>}\n */\nexport const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n}\n","import StyleToObject from './index.js';\n\nexport default StyleToObject;\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'end' | 'start'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {Node | NodeLike | null | undefined} [node]\n   * @returns {Point | undefined}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    if (\n      typeof point.line === 'number' &&\n      point.line > 0 &&\n      typeof point.column === 'number' &&\n      point.column > 0\n    ) {\n      return {\n        line: point.line,\n        column: point.column,\n        offset:\n          typeof point.offset === 'number' && point.offset > -1\n            ? point.offset\n            : undefined\n      }\n    }\n  }\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {Node | NodeLike | null | undefined} [node]\n *   Node.\n * @returns {Position | undefined}\n *   Position.\n */\nexport function position(node) {\n  const start = pointStart(node)\n  const end = pointEnd(node)\n\n  if (start && end) {\n    return {start, end}\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Point | PointLike | Position | PositionLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef Options\n *   Configuration.\n * @property {Array<Node> | null | undefined} [ancestors]\n *   Stack of (inclusive) ancestor nodes surrounding the message (optional).\n * @property {Error | null | undefined} [cause]\n *   Original error cause of the message (optional).\n * @property {Point | Position | null | undefined} [place]\n *   Place of message (optional).\n * @property {string | null | undefined} [ruleId]\n *   Category of message (optional, example: `'my-rule'`).\n * @property {string | null | undefined} [source]\n *   Namespace of who sent the message (optional, example: `'my-package'`).\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Options | null | undefined} [options]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // eslint-disable-next-line complexity\n  constructor(causeOrReason, optionsOrParentOrPlace, origin) {\n    super()\n\n    if (typeof optionsOrParentOrPlace === 'string') {\n      origin = optionsOrParentOrPlace\n      optionsOrParentOrPlace = undefined\n    }\n\n    /** @type {string} */\n    let reason = ''\n    /** @type {Options} */\n    let options = {}\n    let legacyCause = false\n\n    if (optionsOrParentOrPlace) {\n      // Point.\n      if (\n        'line' in optionsOrParentOrPlace &&\n        'column' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Position.\n      else if (\n        'start' in optionsOrParentOrPlace &&\n        'end' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Node.\n      else if ('type' in optionsOrParentOrPlace) {\n        options = {\n          ancestors: [optionsOrParentOrPlace],\n          place: optionsOrParentOrPlace.position\n        }\n      }\n      // Options.\n      else {\n        options = {...optionsOrParentOrPlace}\n      }\n    }\n\n    if (typeof causeOrReason === 'string') {\n      reason = causeOrReason\n    }\n    // Error.\n    else if (!options.cause && causeOrReason) {\n      legacyCause = true\n      reason = causeOrReason.message\n      options.cause = causeOrReason\n    }\n\n    if (!options.ruleId && !options.source && typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        options.ruleId = origin\n      } else {\n        options.source = origin.slice(0, index)\n        options.ruleId = origin.slice(index + 1)\n      }\n    }\n\n    if (!options.place && options.ancestors && options.ancestors) {\n      const parent = options.ancestors[options.ancestors.length - 1]\n\n      if (parent) {\n        options.place = parent.position\n      }\n    }\n\n    const start =\n      options.place && 'start' in options.place\n        ? options.place.start\n        : options.place\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Stack of ancestor nodes surrounding the message.\n     *\n     * @type {Array<Node> | undefined}\n     */\n    this.ancestors = options.ancestors || undefined\n\n    /**\n     * Original error cause of the message.\n     *\n     * @type {Error | undefined}\n     */\n    this.cause = options.cause || undefined\n\n    /**\n     * Starting column of message.\n     *\n     * @type {number | undefined}\n     */\n    this.column = start ? start.column : undefined\n\n    /**\n     * State of problem.\n     *\n     * * `true` — error, file not usable\n     * * `false` — warning, change may be needed\n     * * `undefined` — change likely not needed\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal = undefined\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | undefined}\n     */\n    this.file\n\n    // Field from `Error`.\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = reason\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | undefined}\n     */\n    this.line = start ? start.line : undefined\n\n    // Field from `Error`.\n    /**\n     * Serialized positional info of message.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(options.place) || '1:1'\n\n    /**\n     * Place of message.\n     *\n     * @type {Point | Position | undefined}\n     */\n    this.place = options.place || undefined\n\n    /**\n     * Reason for message, should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | undefined}\n     */\n    this.ruleId = options.ruleId || undefined\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | undefined}\n     */\n    this.source = options.source || undefined\n\n    // Field from `Error`.\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack =\n      legacyCause && options.cause && typeof options.cause.stack === 'string'\n        ? options.cause.stack\n        : ''\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | undefined}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | undefined}\n     */\n    this.expected\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | undefined}\n     */\n    this.note\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | undefined}\n     */\n    this.url\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.column = undefined\nVFileMessage.prototype.line = undefined\nVFileMessage.prototype.ancestors = undefined\nVFileMessage.prototype.cause = undefined\nVFileMessage.prototype.fatal = undefined\nVFileMessage.prototype.place = undefined\nVFileMessage.prototype.ruleId = undefined\nVFileMessage.prototype.source = undefined\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Parents} Parents\n *\n * @typedef {import('property-information').Schema} Schema\n *\n * @typedef {import('./components.js').Components} Components\n */\n\n/**\n * @typedef {JSX.Element | string | null | undefined} Child\n *   Child.\n *\n * @callback Create\n *   Create something in development or production.\n * @param {Nodes} node\n *   hast node.\n * @param {unknown} type\n *   Fragment symbol or tag name.\n * @param {Props} props\n *   Properties and children.\n * @param {string | undefined} key\n *   Key.\n * @returns {JSX.Element}\n *   Result.\n *\n * @typedef {'html' | 'react'} ElementAttributeNameCase\n *   Casing to use for attribute names.\n *\n *   HTML casing is for example `class`, `stroke-linecap`, `xml:lang`.\n *   React casing is for example `className`, `strokeLinecap`, `xmlLang`.\n *\n * @typedef {[string, Value]} Field\n *   Property field.\n *\n * @typedef {unknown} Fragment\n *   Represent the children, typically a symbol.\n *\n * @callback Jsx\n *   Create a production element.\n * @param {unknown} type\n *   Element type: `Fragment` symbol, tag name (`string`), component.\n * @param {Props} props\n *   Element props, `children`, and maybe `node`.\n * @param {string | undefined} [key]\n *   Dynamicly generated key to use.\n * @returns {JSX.Element}\n *   An element from your framework.\n *\n * @callback JsxDev\n *   Create a development element.\n * @param {unknown} type\n *   Element type: `Fragment` symbol, tag name (`string`), component.\n * @param {Props} props\n *   Element props, `children`, and maybe `node`.\n * @param {string | undefined} key\n *   Dynamicly generated key to use.\n * @param {boolean} isStaticChildren\n *   Whether two or more children are passed (in an array), which is whether\n *   `jsxs` or `jsx` would be used.\n * @param {Source} source\n *   Info about source.\n * @param {undefined} self\n *   Nothing (this is used by frameworks that have components, we don’t).\n * @returns {JSX.Element}\n *   An element from your framework.\n *\n * @typedef {{children?: Array<Child> | Child, node?: Element | undefined, [prop: string]: Array<Child> | Child | Element | Value | undefined}} Props\n *   Properties and children.\n *\n * @typedef RegularFields\n *   Configuration.\n * @property {Partial<Components> | null | undefined} [components]\n *   Components to use (optional).\n * @property {ElementAttributeNameCase | null | undefined} [elementAttributeNameCase='react']\n *   Specify casing to use for attribute names (default: `'react'`).\n * @property {string | null | undefined} [filePath]\n *   File path to the original source file (optional).\n *\n *   Passed in source info to `jsxDEV` when using the automatic runtime with\n *   `development: true`.\n * @property {boolean | null | undefined} [ignoreInvalidStyle=false]\n *   Ignore invalid CSS in `style` props (default: `false`);\n *   the default behavior is to throw an error.\n * @property {boolean | null | undefined} [passKeys=true]\n *   Generate keys to optimize frameworks that support them (default: `true`).\n *\n *   > 👉 **Note**: Solid currently fails if keys are passed.\n * @property {boolean | null | undefined} [passNode=false]\n *   Pass the hast element node to components (default: `false`).\n * @property {Space | null | undefined} [space='html']\n *   Whether `tree` is in the `'html'` or `'svg'` space (default: `'html'`).\n *\n *   When an `<svg>` element is found in the HTML space, this package already\n *   automatically switches to and from the SVG space when entering and exiting\n *   it.\n * @property {StylePropertyNameCase | null | undefined} [stylePropertyNameCase='dom']\n *   Specify casing to use for property names in `style` objects (default:\n *   `'dom'`).\n * @property {boolean | null | undefined} [tableCellAlignToStyle=true]\n *   Turn obsolete `align` props on `td` and `th` into CSS `style` props\n *   (default: `true`).\n *\n * @typedef RuntimeDevelopment\n *   Runtime fields when development is on.\n * @property {Fragment} Fragment\n *   Fragment.\n * @property {true} development\n *   Whether to use `jsxDEV` (when on) or `jsx` and `jsxs` (when off).\n * @property {Jsx | null | undefined} [jsx]\n *   Dynamic JSX (optional).\n * @property {JsxDev} jsxDEV\n *   Development JSX.\n * @property {Jsx | null | undefined} [jsxs]\n *   Static JSX (optional).\n *\n * @typedef RuntimeProduction\n *   Runtime fields when development is off.\n * @property {Fragment} Fragment\n *   Fragment.\n * @property {false | null | undefined} [development]\n *   Whether to use `jsxDEV` (when on) or `jsx` and `jsxs` (when off) (optional).\n * @property {Jsx} jsx\n *   Dynamic JSX.\n * @property {JsxDev | null | undefined} [jsxDEV]\n *   Development JSX (optional).\n * @property {Jsx} jsxs\n *   Static JSX.\n *\n * @typedef RuntimeUnknown\n *   Runtime fields when development might be on or off.\n * @property {Fragment} Fragment\n *   Fragment.\n * @property {boolean} development\n *   Whether to use `jsxDEV` (when on) or `jsx` and `jsxs` (when off).\n * @property {Jsx | null | undefined} [jsx]\n *   Dynamic JSX (optional).\n * @property {JsxDev | null | undefined} [jsxDEV]\n *   Development JSX (optional).\n * @property {Jsx | null | undefined} [jsxs]\n *   Static JSX (optional).\n *\n * @typedef Source\n *   Info about source.\n * @property {number | undefined} columnNumber\n *   Column where thing starts (0-indexed).\n * @property {string | undefined} fileName\n *   Name of source file.\n * @property {number | undefined} lineNumber\n *   Line where thing starts (1-indexed).\n *\n * @typedef {'html' | 'svg'} Space\n *   Namespace.\n *\n *   > 👉 **Note**: hast is not XML.\n *   > It supports SVG as embedded in HTML.\n *   > It does not support the features available in XML.\n *   > Passing SVG might break but fragments of modern SVG should be fine.\n *   > Use `xast` if you need to support SVG as XML.\n *\n * @typedef State\n *   Info passed around.\n * @property {unknown} Fragment\n *   Fragment symbol.\n * @property {Array<Parents>} ancestors\n *   Stack of parents.\n * @property {Partial<Components>} components\n *   Components to swap.\n * @property {Create} create\n *   Create something in development or production.\n * @property {ElementAttributeNameCase} elementAttributeNameCase\n *   Casing to use for attribute names.\n * @property {string | undefined} filePath\n *   File path.\n * @property {boolean} ignoreInvalidStyle\n *   Ignore invalid CSS in `style` props.\n * @property {boolean} passKeys\n *   Generate keys to optimize frameworks that support them.\n * @property {boolean} passNode\n *   Pass `node` to components.\n * @property {Schema} schema\n *   Current schema.\n * @property {StylePropertyNameCase} stylePropertyNameCase\n *   Casing to use for property names in `style` objects.\n * @property {boolean} tableCellAlignToStyle\n *   Turn obsolete `align` props on `td` and `th` into CSS `style` props.\n *\n * @typedef {Record<string, string>} Style\n *   Style map.\n *\n * @typedef {'css' | 'dom'} StylePropertyNameCase\n *   Casing to use for property names in `style` objects.\n *\n *   CSS casing is for example `background-color` and `-webkit-line-clamp`.\n *   DOM casing is for example `backgroundColor` and `WebkitLineClamp`.\n *\n * @typedef {Style | boolean | number | string} Value\n *   Primitive property value and `Style` map.\n */\n\n/**\n * @typedef {RuntimeDevelopment & RegularFields} Development\n *   Configuration (development).\n * @typedef {Development | Production | Unknown} Options\n *   Configuration.\n * @typedef {RegularFields & RuntimeProduction} Production\n *   Configuration (production).\n * @typedef {RegularFields & RuntimeUnknown} Unknown\n *   Configuration (production or development).\n */\n\nimport {stringify as commas} from 'comma-separated-tokens'\nimport {whitespace} from 'hast-util-whitespace'\nimport {find, hastToReact, html, svg} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport styleToObject from 'style-to-object'\nimport {pointStart} from 'unist-util-position'\nimport {VFileMessage} from 'vfile-message'\n\nconst own = {}.hasOwnProperty\n\n/** @type {Map<string, number>} */\nconst emptyMap = new Map()\n\nconst cap = /[A-Z]/g\nconst dashSomething = /-([a-z])/g\n\n// `react-dom` triggers a warning for *any* white space in tables.\n// To follow GFM, `mdast-util-to-hast` injects line endings between elements.\n// Other tools might do so too, but they don’t do here, so we remove all of\n// that.\n\n// See: <https://github.com/facebook/react/pull/7081>.\n// See: <https://github.com/facebook/react/pull/7515>.\n// See: <https://github.com/remarkjs/remark-react/issues/64>.\n// See: <https://github.com/rehypejs/rehype-react/pull/29>.\n// See: <https://github.com/rehypejs/rehype-react/pull/32>.\n// See: <https://github.com/rehypejs/rehype-react/pull/45>.\nconst tableElements = new Set(['table', 'tbody', 'thead', 'tfoot', 'tr'])\n\nconst tableCellElement = new Set(['td', 'th'])\n\n/**\n * Transform a hast tree to preact, react, solid, svelte, vue, etc.,\n * with an automatic JSX runtime.\n *\n * @param {Nodes} tree\n *   Tree to transform.\n * @param {Options} options\n *   Configuration (required).\n * @returns {JSX.Element}\n *   JSX element.\n */\n\nexport function toJsxRuntime(tree, options) {\n  if (!options || options.Fragment === undefined) {\n    throw new TypeError('Expected `Fragment` in options')\n  }\n\n  const filePath = options.filePath || undefined\n  /** @type {Create} */\n  let create\n\n  if (options.development) {\n    if (typeof options.jsxDEV !== 'function') {\n      throw new TypeError(\n        'Expected `jsxDEV` in options when `development: true`'\n      )\n    }\n\n    create = developmentCreate(filePath, options.jsxDEV)\n  } else {\n    if (typeof options.jsx !== 'function') {\n      throw new TypeError('Expected `jsx` in production options')\n    }\n\n    if (typeof options.jsxs !== 'function') {\n      throw new TypeError('Expected `jsxs` in production options')\n    }\n\n    create = productionCreate(filePath, options.jsx, options.jsxs)\n  }\n\n  /** @type {State} */\n  const state = {\n    Fragment: options.Fragment,\n    ancestors: [],\n    components: options.components || {},\n    create,\n    elementAttributeNameCase: options.elementAttributeNameCase || 'react',\n    filePath,\n    ignoreInvalidStyle: options.ignoreInvalidStyle || false,\n    passKeys: options.passKeys !== false,\n    passNode: options.passNode || false,\n    schema: options.space === 'svg' ? svg : html,\n    stylePropertyNameCase: options.stylePropertyNameCase || 'dom',\n    tableCellAlignToStyle: options.tableCellAlignToStyle !== false\n  }\n\n  const result = one(state, tree, undefined)\n\n  // JSX element.\n  if (result && typeof result !== 'string') {\n    return result\n  }\n\n  // Text node or something that turned into nothing.\n  return state.create(\n    tree,\n    state.Fragment,\n    {children: result || undefined},\n    undefined\n  )\n}\n\n/**\n * Transform a node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Nodes} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction one(state, node, key) {\n  if (node.type === 'element' || node.type === 'root') {\n    const parentSchema = state.schema\n    let schema = parentSchema\n\n    if (\n      node.type === 'element' &&\n      node.tagName.toLowerCase() === 'svg' &&\n      parentSchema.space === 'html'\n    ) {\n      schema = svg\n      state.schema = schema\n    }\n\n    state.ancestors.push(node)\n\n    let children = createChildren(state, node)\n    const props = createProperties(state, state.ancestors)\n    let type = state.Fragment\n\n    state.ancestors.pop()\n\n    if (node.type === 'element') {\n      if (children && tableElements.has(node.tagName)) {\n        children = children.filter(function (child) {\n          return typeof child === 'string' ? !whitespace(child) : true\n        })\n      }\n\n      if (own.call(state.components, node.tagName)) {\n        const key = /** @type {keyof JSX.IntrinsicElements} */ (node.tagName)\n        type = state.components[key]\n\n        // If this is swapped out for a component:\n        if (\n          typeof type !== 'string' &&\n          type !== state.Fragment &&\n          state.passNode\n        ) {\n          props.node = node\n        }\n      } else {\n        type = node.tagName\n      }\n    }\n\n    if (children.length > 0) {\n      const value = children.length > 1 ? children : children[0]\n\n      if (value) {\n        props.children = value\n      }\n    }\n\n    // Restore parent schema.\n    state.schema = parentSchema\n\n    return state.create(node, type, props, key)\n  }\n\n  if (node.type === 'text') {\n    return node.value\n  }\n}\n\n/**\n * @param {string | undefined} _\n *   Path to file.\n * @param {Jsx} jsx\n *   Dynamic.\n * @param {Jsx} jsxs\n *   Static.\n * @returns {Create}\n *   Create a production element.\n */\nfunction productionCreate(_, jsx, jsxs) {\n  return create\n  /** @type {Create} */\n  function create(_, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const fn = isStaticChildren ? jsxs : jsx\n    return key ? fn(type, props, key) : fn(type, props)\n  }\n}\n\n/**\n * @param {string | undefined} filePath\n *   Path to file.\n * @param {JsxDev} jsxDEV\n *   Development.\n * @returns {Create}\n *   Create a development element.\n */\nfunction developmentCreate(filePath, jsxDEV) {\n  return create\n  /** @type {Create} */\n  function create(node, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const point = pointStart(node)\n    return jsxDEV(\n      type,\n      props,\n      key,\n      isStaticChildren,\n      {\n        columnNumber: point ? point.column - 1 : undefined,\n        fileName: filePath,\n        lineNumber: point ? point.line : undefined\n      },\n      undefined\n    )\n  }\n}\n\n/**\n * Create children.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Parents} node\n *   Current element.\n * @returns {Array<Child>}\n *   Children.\n */\nfunction createChildren(state, node) {\n  /** @type {Array<Child>} */\n  const children = []\n  let index = -1\n  /** @type {Map<string, number>} */\n  // Note: test this when Solid doesn’t want to merge my upcoming PR.\n  /* c8 ignore next */\n  const countsByTagName = state.passKeys ? new Map() : emptyMap\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n    /** @type {string | undefined} */\n    let key\n\n    if (state.passKeys && child.type === 'element') {\n      const count = countsByTagName.get(child.tagName) || 0\n      key = child.tagName + '-' + count\n      countsByTagName.set(child.tagName, count + 1)\n    }\n\n    const result = one(state, child, key)\n    if (result !== undefined) children.push(result)\n  }\n\n  return children\n}\n\n/**\n * Handle properties.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Array<Parents>} ancestors\n *   Stack of parents.\n * @returns {Props}\n *   Props for runtime.\n */\nfunction createProperties(state, ancestors) {\n  const node = ancestors[ancestors.length - 1]\n  /** @type {Props} */\n  const props = {}\n  /** @type {string} */\n  let prop\n\n  if ('properties' in node && node.properties) {\n    /** @type {string | undefined} */\n    let alignValue\n\n    for (prop in node.properties) {\n      if (prop !== 'children' && own.call(node.properties, prop)) {\n        const result = createProperty(\n          state,\n          ancestors,\n          prop,\n          node.properties[prop]\n        )\n\n        if (result) {\n          const [key, value] = result\n\n          if (\n            state.tableCellAlignToStyle &&\n            key === 'align' &&\n            typeof value === 'string' &&\n            tableCellElement.has(node.tagName)\n          ) {\n            alignValue = value\n          } else {\n            props[key] = value\n          }\n        }\n      }\n    }\n\n    if (alignValue) {\n      // Assume style is an object.\n      const style = /** @type {Style} */ (props.style || (props.style = {}))\n      style[\n        state.stylePropertyNameCase === 'css' ? 'text-align' : 'textAlign'\n      ] = alignValue\n    }\n  }\n\n  return props\n}\n\n/**\n * Handle a property.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Array<Parents>} ancestors\n *   Stack of parents.\n * @param {string} prop\n *   Key.\n * @param {Array<number | string> | boolean | number | string | null | undefined} value\n *   hast property value.\n * @returns {Field | undefined}\n *   Field for runtime, optional.\n */\nfunction createProperty(state, ancestors, prop, value) {\n  const info = find(state.schema, prop)\n\n  // Ignore nullish and `NaN` values.\n  if (\n    value === null ||\n    value === undefined ||\n    (typeof value === 'number' && Number.isNaN(value))\n  ) {\n    return\n  }\n\n  if (Array.isArray(value)) {\n    // Accept `array`.\n    // Most props are space-separated.\n    value = info.commaSeparated ? commas(value) : spaces(value)\n  }\n\n  // React only accepts `style` as object.\n  if (info.property === 'style') {\n    let styleObject =\n      typeof value === 'object'\n        ? value\n        : parseStyle(state, ancestors, String(value))\n\n    if (state.stylePropertyNameCase === 'css') {\n      styleObject = transformStylesToCssCasing(styleObject)\n    }\n\n    return ['style', styleObject]\n  }\n\n  return [\n    state.elementAttributeNameCase === 'react' && info.space\n      ? hastToReact[info.property] || info.property\n      : info.attribute,\n    value\n  ]\n}\n\n/**\n * Parse a CSS declaration to an object.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Array<Nodes>} ancestors\n *   Stack of nodes.\n * @param {string} value\n *   CSS declarations.\n * @returns {Style}\n *   Properties.\n * @throws\n *   Throws `VFileMessage` when CSS cannot be parsed.\n */\nfunction parseStyle(state, ancestors, value) {\n  /** @type {Style} */\n  const result = {}\n\n  try {\n    styleToObject(value, replacer)\n  } catch (error) {\n    if (!state.ignoreInvalidStyle) {\n      const cause = /** @type {Error} */ (error)\n      const message = new VFileMessage('Cannot parse `style` attribute', {\n        ancestors,\n        cause,\n        source: 'hast-util-to-jsx-runtime',\n        ruleId: 'style'\n      })\n      message.file = state.filePath || undefined\n      message.url =\n        'https://github.com/syntax-tree/hast-util-to-jsx-runtime#cannot-parse-style-attribute'\n\n      throw message\n    }\n  }\n\n  return result\n\n  /**\n   * Add a CSS property (normal, so with dashes) to `result` as a DOM CSS\n   * property.\n   *\n   * @param {string} name\n   *   Key.\n   * @param {string} value\n   *   Value\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function replacer(name, value) {\n    let key = name\n\n    if (key.slice(0, 2) !== '--') {\n      if (key.slice(0, 4) === '-ms-') key = 'ms-' + key.slice(4)\n      key = key.replace(dashSomething, toCamel)\n    }\n\n    result[key] = value\n  }\n}\n\n/**\n * Transform a DOM casing style object to a CSS casing style object.\n *\n * @param {Style} domCasing\n * @returns {Style}\n */\nfunction transformStylesToCssCasing(domCasing) {\n  /** @type {Style} */\n  const cssCasing = {}\n  /** @type {string} */\n  let from\n\n  for (from in domCasing) {\n    if (own.call(domCasing, from)) {\n      cssCasing[transformStyleToCssCasing(from)] = domCasing[from]\n    }\n  }\n\n  return cssCasing\n}\n\n/**\n * Transform a DOM casing style field to a CSS casing style field.\n *\n * @param {string} from\n * @returns {string}\n */\nfunction transformStyleToCssCasing(from) {\n  let to = from.replace(cap, toDash)\n  // Handle `ms-xxx` -> `-ms-xxx`.\n  if (to.slice(0, 3) === 'ms-') to = '-' + to\n  return to\n}\n\n/**\n * Make `$1` capitalized.\n *\n * @param {string} _\n *   Whatever.\n * @param {string} $1\n *   Single ASCII alphabetical.\n * @returns {string}\n *   Capitalized `$1`.\n */\nfunction toCamel(_, $1) {\n  return $1.toUpperCase()\n}\n\n/**\n * Make `$0` dash cased.\n *\n * @param {string} $0\n *   Capitalized ASCII leter.\n * @returns {string}\n *   Dash and lower letter.\n */\nfunction toDash($0) {\n  return '-' + $0.toLowerCase()\n}\n","/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","/**\n * HTML URL properties.\n *\n * Each key is a property name and each value is a list of tag names it applies\n * to or `null` if it applies to all elements.\n *\n * @type {Record<string, Array<string> | null>}\n */\nexport const urlAttributes = {\n  action: ['form'],\n  cite: ['blockquote', 'del', 'ins', 'q'],\n  data: ['object'],\n  formAction: ['button', 'input'],\n  href: ['a', 'area', 'base', 'link'],\n  icon: ['menuitem'],\n  itemId: null,\n  manifest: ['html'],\n  ping: ['a', 'area'],\n  poster: ['video'],\n  src: [\n    'audio',\n    'embed',\n    'iframe',\n    'img',\n    'input',\n    'script',\n    'source',\n    'track',\n    'video'\n  ]\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nconst unicodePunctuationInternal = regexCheck(/\\p{P}/u)\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/)\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function unicodePunctuation(code) {\n  return asciiPunctuation(code) || unicodePunctuationInternal(code)\n}\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/)\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code))\n  }\n}\n","const characterReferences = {'\"': 'quot', '&': 'amp', '<': 'lt', '>': 'gt'}\n\n/**\n * Encode only the dangerous HTML characters.\n *\n * This ensures that certain characters which have special meaning in HTML are\n * dealt with.\n * Technically, we can skip `>` and `\"` in many cases, but CM includes them.\n *\n * @param {string} value\n *   Value to encode.\n * @returns {string}\n *   Encoded value.\n */\nexport function encode(value) {\n  return value.replace(/[\"&<>]/g, replace)\n\n  /**\n   * @param {string} value\n   * @returns {string}\n   */\n  function replace(value) {\n    // @ts-expect-error Hush, it’s fine.\n    return '&' + characterReferences[value] + ';'\n  }\n}\n","import {asciiAlphanumeric} from 'micromark-util-character'\nimport {encode} from 'micromark-util-encode'\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri`).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * A regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string | null | undefined} url\n *   URI to sanitize.\n * @param {RegExp | null | undefined} [protocol]\n *   Allowed protocols.\n * @returns {string}\n *   Sanitized URI.\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''))\n  if (!protocol) {\n    return value\n  }\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    protocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n  return ''\n}\n\n/**\n * Normalize a URL.\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n *   URI to normalize.\n * @returns {string}\n *   Normalized URI.\n */\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n  let start = 0\n  let skip = 0\n  while (++index < value.length) {\n    const code = value.charCodeAt(index)\n    /** @type {string} */\n    let replace = ''\n\n    // A correct percent encoded value.\n    if (\n      code === 37 &&\n      asciiAlphanumeric(value.charCodeAt(index + 1)) &&\n      asciiAlphanumeric(value.charCodeAt(index + 2))\n    ) {\n      skip = 2\n    }\n    // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code)\n      }\n    }\n    // Astral.\n    else if (code > 55_295 && code < 57_344) {\n      const next = value.charCodeAt(index + 1)\n\n      // A correct surrogate pair.\n      if (code < 56_320 && next > 56_319 && next < 57_344) {\n        replace = String.fromCharCode(code, next)\n        skip = 1\n      }\n      // Lone surrogate.\n      else {\n        replace = '\\uFFFD'\n      }\n    }\n    // Unicode.\n    else {\n      replace = String.fromCharCode(code)\n    }\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace))\n      start = index + skip + 1\n      replace = ''\n    }\n    if (skip) {\n      index += skip\n      skip = 0\n    }\n  }\n  return result.join('') + value.slice(start)\n}\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s (default: `true`).\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML (default: `true`).\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} [value]\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Nodes}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {undefined}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {Array<unknown>} */\n  let parameters\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n  remove = remove > 0 ? remove : 0\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove)\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove)\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0)\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n */\n\nimport {splice} from 'micromark-util-chunked'\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} events\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */ // eslint-disable-next-line complexity\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n  let event\n  /** @type {number | undefined} */\n  let lineIndex\n  /** @type {number} */\n  let otherIndex\n  /** @type {Event} */\n  let otherEvent\n  /** @type {Array<Event>} */\n  let parameters\n  /** @type {Array<Event>} */\n  let subevents\n  /** @type {boolean | undefined} */\n  let more\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n    event = events[index]\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (\n      index &&\n      event[1].type === 'chunkFlow' &&\n      events[index - 1][1].type === 'listItemPrefix'\n    ) {\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'lineEndingBlank'\n      ) {\n        otherIndex += 2\n      }\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'content'\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break\n          }\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n        if (\n          otherEvent[1].type === 'lineEnding' ||\n          otherEvent[1].type === 'lineEndingBlank'\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank'\n            }\n            otherEvent[1].type = 'lineEnding'\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start)\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n  return !more\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {Array<Event>} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {Array<number>} */\n  const startPositions = []\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {Array<[number, number]>} */\n  const jumps = []\n  /** @type {Record<string, number>} */\n  const gaps = {}\n  /** @type {Array<Chunk>} */\n  let stream\n  /** @type {Token | undefined} */\n  let previous\n  let index = -1\n  /** @type {Token | undefined} */\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start]\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition)\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n      if (!current.next) {\n        stream.push(null)\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n      tokenizer.write(stream)\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    }\n\n    // Unravel the next token.\n    previous = current\n    current = current.next\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      start = index + 1\n      breaks.push(start)\n      // Help GC.\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = []\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n  } else {\n    breaks.pop()\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n  index = -1\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n  return gaps\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Handles} Handles\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {Array<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {undefined}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n * @param {Array<unknown>} list\n * @returns {undefined}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {Array<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   A single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {undefined}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownSpace} from 'micromark-util-character'\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n  let previous\n  return contentStart\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n    if (previous) {\n      previous.next = token\n    }\n    previous = token\n    return data(code)\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    }\n\n    // Data.\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n}\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext | undefined} */\n  let childFlow\n  /** @type {Token | undefined} */\n  let childToken\n  /** @type {number} */\n  let lineStartOffset\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    }\n\n    // Done.\n    return checkNewContainers(code)\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n      if (childFlow) {\n        closeFlow()\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      let index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n    return start(code)\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    }\n\n    // Check if there is a new container.\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState])\n    // Try another.\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow'))\n      // Get ready for the next line.\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n    effects.consume(code)\n    return flowContinue\n  }\n\n  /**\n   * @param {Token} token\n   * @param {boolean | undefined} [eof]\n   * @returns {undefined}\n   */\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream)\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset &&\n          // …and either is not ended yet…\n          (!childFlow.events[index][1].end ||\n            // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean | undefined} */\n      let seen\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n          seen = true\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n    }\n  }\n\n  /**\n   * @param {number} size\n   * @returns {undefined}\n   */\n  function exitContainers(size) {\n    let index = stack.length\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n    stack.length = size\n  }\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'linePrefix')(code)\n      : after(code)\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous\n  return chunkStart\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return chunkInside(code)\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    }\n\n    // Data.\n    effects.consume(code)\n    return chunkInside\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return chunkInside\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1]\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding,\n    // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n\n/**\n * @param {'string' | 'text'} field\n * @returns {InitialConstruct}\n */\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      }\n\n      // Data.\n      effects.consume(code)\n      return data\n    }\n\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n      const list = constructs[code]\n      let index = -1\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index]\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n      return false\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n * @returns {Resolver}\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number | undefined} */\n    let enter\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n        enter = undefined\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean | undefined} */\n      let tabs\n      while (index--) {\n        const chunk = chunks[index]\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n          if (bufferIndex) break\n          bufferIndex = -1\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n      eventIndex++\n    }\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {Array<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * @callback Restore\n * @returns {undefined}\n *\n * @typedef Info\n * @property {Restore} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {undefined}\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n  let chunks = []\n  /** @type {Array<Token>} */\n  let stack = []\n  /** @type {boolean | undefined} */\n  let consumed = true\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n\n  /**\n   * The state function.\n   *\n   * @type {State | undefined}\n   */\n  let state = initialize.tokenize.call(context, effects)\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n  return context\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main()\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n    addResult(initialize, 0)\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {line, column, offset, _index, _bufferIndex} = point\n    return {\n      line,\n      column,\n      offset,\n      _index,\n      _bufferIndex\n    }\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {undefined}\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index]\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {undefined}\n   */\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++\n\n      // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code\n\n    // Mark as consumed.\n    consumed = true\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   */\n  function constructFactory(onreturn, fields) {\n    return hook\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | Construct | ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State | undefined} [bogusState]\n     * @returns {State}\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n      let constructIndex\n      /** @type {Construct} */\n      let currentConstruct\n      /** @type {Info} */\n      let info\n      return Array.isArray(constructs) /* c8 ignore next 1 */\n        ? handleListOfConstructs(constructs)\n        : 'tokenize' in constructs\n        ? // @ts-expect-error Looks like a construct.\n          handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n      function handleMapOfConstructs(map) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n        if (list.length === 0) {\n          return bogusState\n        }\n        return handleConstruct(list[constructIndex])\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n      function handleConstruct(construct) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          // Always populated by defaults.\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true\n        info.restore()\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n        return bogusState\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {undefined}\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n\n    /**\n     * Restore state.\n     *\n     * @returns {undefined}\n     */\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {undefined}\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'end' | 'start'>} token\n * @returns {Array<Chunk>}\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n  let view\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n    if (startBufferIndex > -1) {\n      const head = view[0]\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex)\n      } else {\n        view.shift()\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n  return view\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean | undefined} [expandTabs=false]\n * @returns {string}\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {boolean | undefined} */\n  let atTab\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n    let value\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n        case -4: {\n          value = '\\n'\n          break\n        }\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n    atTab = chunk === -2\n    result.push(value)\n  }\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('thematicBreak')\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code\n    return atBreak(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit('thematicBreak')\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n    effects.exit('thematicBreakSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, atBreak, 'whitespace')(code)\n      : atBreak(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/** @type {Construct} */\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n\n/** @type {Construct} */\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine,\n      // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined\n    // Always populated by defaults.\n\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n\n/**\n * @type {Exiter}\n * @this {TokenizeContext}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this\n  return contStart\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(\n        effects,\n        contBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return contBefore(code)\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code)\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return enclosedBefore\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return raw(code)\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return enclosed(code)\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return enclosedBefore(code)\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? enclosedEscape : enclosed\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return enclosed\n    }\n    return enclosed(code)\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (\n      !balance &&\n      (code === null || code === 41 || markdownLineEndingOrSpace(code))\n    ) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code)\n      balance++\n      return raw\n    }\n    if (code === 41) {\n      effects.consume(code)\n      balance--\n      return raw\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? rawEscape : raw\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return raw\n    }\n    return raw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (\n      size > 999 ||\n      code === null ||\n      code === 91 ||\n      (code === 93 && !seen) ||\n      // To do: remove in the future once we’ve switched from\n      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n      // which doesn’t need this.\n      // Hidden footnotes hook.\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return labelInside(code)\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    if (!seen) seen = !markdownSpace(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      marker = code === 40 ? 41 : code\n      return begin\n    }\n    return nok(code)\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    return atBreak(code)\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return begin(marker)\n    }\n    if (code === null) {\n      return nok(code)\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atBreak, 'linePrefix')\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return inside(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? escape : inside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return inside\n    }\n    return inside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns {State}\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n    return ok(code)\n  }\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value\n      // Collapse markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ')\n      // Trim.\n      .replace(/^ | $/g, '')\n      // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n\n/** @type {Construct} */\nconst titleBefore = {\n  tokenize: tokenizeTitleBefore,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n  let identifier\n  return start\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter('definition')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      return markerAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, destinationBefore)(code)\n      : destinationBefore(code)\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionDestination',\n      'definitionDestinationLiteral',\n      'definitionDestinationLiteralMarker',\n      'definitionDestinationRaw',\n      'definitionDestinationString'\n    )(code)\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code)\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, afterWhitespace, 'whitespace')(code)\n      : afterWhitespace(code)\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier)\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, beforeMarker)(code)\n      : nok(code)\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(\n      effects,\n      titleAfter,\n      nok,\n      'definitionTitle',\n      'definitionTitleMarker',\n      'definitionTitleString'\n    )(code)\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, titleAfterOptionalWhitespace, 'whitespace')(code)\n      : titleAfterOptionalWhitespace(code)\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n\n/** @type {Construct} */\nconst furtherStart = {\n  tokenize: tokenizeFurtherStart,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter('codeIndented')\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? atBreak(code)\n      : nok(code)\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code)\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return inside(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return inside\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit('codeIndented')\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this\n  return furtherStart\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return furtherStart\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? furtherStart(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n  let content\n  /** @type {Token} */\n  let text\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter('atxHeading')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('atxHeadingSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return sequenceOpen\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return atBreak(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequenceFurther(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code)\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequenceFurther\n    }\n    effects.exit('atxHeadingSequence')\n    return atBreak(code)\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length\n  /** @type {number | undefined} */\n  let content\n  /** @type {number | undefined} */\n  let text\n  /** @type {number | undefined} */\n  let definition\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = 'setextHeadingText'\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context])\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length\n    /** @type {boolean | undefined} */\n    let paragraph\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (\n        self.events[index][1].type !== 'lineEnding' &&\n        self.events[index][1].type !== 'linePrefix' &&\n        self.events[index][1].type !== 'content'\n      ) {\n        paragraph = self.events[index][1].type === 'paragraph'\n        break\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      marker = code\n      return before(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('setextHeadingLineSequence')\n    return inside(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    effects.exit('setextHeadingLineSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'lineSuffix')(code)\n      : after(code)\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  tokenize: tokenizeBlankLineBefore,\n  partial: true\n}\nconst nonLazyContinuationStart = {\n  tokenize: tokenizeNonLazyContinuationStart,\n  partial: true\n}\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start\n    // Remove the line prefix.\n    events.splice(index - 2, 2)\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n  let marker\n  /** @type {boolean} */\n  let closingTag\n  /** @type {string} */\n  let buffer\n  /** @type {number} */\n  let index\n  /** @type {Code} */\n  let markerB\n  return start\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      closingTag = true\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      marker = 3\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      marker = 2\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      marker = 5\n      index = 0\n      return cdataOpenInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      marker = 4\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation\n      }\n      return cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      const slash = code === 47\n      const name = buffer.toLowerCase()\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6\n        if (slash) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      marker = 7\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : closingTag\n        ? completeClosingTagAfter(code)\n        : completeAttributeNameBefore(code)\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    return completeAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n    return completeAttributeNameBefore(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      markerB = code\n      return completeAttributeValueQuoted\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    return completeAttributeValueUnquoted(code)\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code)\n      markerB = null\n      return completeAttributeValueQuotedAfter\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 47 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code)\n      return continuationCdataInside\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit('htmlFlowData')\n      return effects.check(\n        blankLineBefore,\n        continuationAfter,\n        continuationStart\n      )(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationStart(code)\n    }\n    effects.consume(code)\n    return continuation\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(\n      nonLazyContinuationStart,\n      continuationStartNonLazy,\n      continuationAfter\n    )(code)\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return continuationBefore\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code)\n    }\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase()\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code)\n        return continuationClose\n      }\n      return continuation(code)\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationAfter(code)\n    }\n    effects.consume(code)\n    return continuationClose\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit('htmlFlow')\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  tokenize: tokenizeNonLazyContinuation,\n  partial: true\n}\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n  const closeStart = {\n    tokenize: tokenizeCloseStart,\n    partial: true\n  }\n  let initialPrefix = 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code)\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1]\n    initialPrefix =\n      tail && tail[1].type === 'linePrefix'\n        ? tail[2].sliceSerialize(tail[1], true).length\n        : 0\n    marker = code\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++\n      effects.consume(code)\n      return sequenceOpen\n    }\n    if (sizeOpen < 3) {\n      return nok(code)\n    }\n    effects.exit('codeFencedFenceSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, infoBefore, 'whitespace')(code)\n      : infoBefore(code)\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFencedFence')\n      return self.interrupt\n        ? ok(code)\n        : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return infoBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, metaBefore, 'whitespace')(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return info\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code)\n    }\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return infoBefore(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return meta\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code)\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return contentStart\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code)\n      ? factorySpace(\n          effects,\n          beforeContentChunk,\n          'linePrefix',\n          initialPrefix + 1\n        )(code)\n      : beforeContentChunk(code)\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return contentChunk(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return beforeContentChunk(code)\n    }\n    effects.consume(code)\n    return contentChunk\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0\n    return startBefore\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter('codeFencedFence')\n      return markdownSpace(code)\n        ? factorySpace(\n            effects,\n            beforeSequenceClose,\n            'linePrefix',\n            self.parser.constructs.disable.null.includes('codeIndented')\n              ? undefined\n              : 4\n          )(code)\n        : beforeSequenceClose(code)\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter('codeFencedFenceSequence')\n        return sequenceClose(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++\n        effects.consume(code)\n        return sequenceClose\n      }\n      if (size >= sizeOpen) {\n        effects.exit('codeFencedFenceSequence')\n        return markdownSpace(code)\n          ? factorySpace(effects, sequenceCloseAfter, 'whitespace')(code)\n          : sequenceCloseAfter(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n      return nok(code)\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineStart\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n","/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string|false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const char = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return char === characterReference ? false : char\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n  let max\n  /** @type {(code: Code) => boolean} */\n  let test\n  return start\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit('characterReferenceValue')\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {asciiPunctuation} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return inside\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n}\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n}\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n}\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  while (++index < events.length) {\n    const token = events[index][1]\n    if (\n      token.type === 'labelImage' ||\n      token.type === 'labelLink' ||\n      token.type === 'labelEnd'\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n  return events\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n  let token\n  /** @type {number | undefined} */\n  let open\n  /** @type {number | undefined} */\n  let close\n  /** @type {Array<Event>} */\n  let media\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1]\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ]\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3))\n\n  // Text open.\n  media = push(media, [['enter', text, context]])\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  )\n\n  // Text close, marker close, label close.\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ])\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1))\n\n  // Media close.\n  media = push(media, [['exit', group, context]])\n  splice(events, open, events.length, media)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n  let labelStart\n  /** @type {boolean} */\n  let defined\n\n  // Find an opening.\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n  return start\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code)\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code)\n    }\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    )\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return after\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        labelEndOk,\n        defined ? labelEndOk : labelEndNok\n      )(code)\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(\n        referenceFullConstruct,\n        labelEndOk,\n        defined ? referenceNotFull : labelEndNok\n      )(code)\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code)\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(\n      referenceCollapsedConstruct,\n      labelEndOk,\n      labelEndNok\n    )(code)\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code)\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return resourceBefore\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceOpen)(code)\n      : resourceOpen(code)\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code)\n    }\n    return factoryDestination(\n      effects,\n      resourceDestinationAfter,\n      resourceDestinationMissing,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      32\n    )(code)\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceBetween)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code)\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        resourceTitleAfter,\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n    return resourceEnd(code)\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceEnd)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this\n  return referenceFull\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      referenceFullAfter,\n      referenceFullMissing,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return referenceCollapsedOpen\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n// eslint-disable-next-line complexity\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n  let open\n  /** @type {Token} */\n  let group\n  /** @type {Token} */\n  let text\n  /** @type {Token} */\n  let openingSequence\n  /** @type {Token} */\n  let closingSequence\n  /** @type {number} */\n  let use\n  /** @type {Array<Event>} */\n  let nextEvents\n  /** @type {number} */\n  let offset\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open &&\n          // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          }\n\n          // Number of markers to use from the sequence.\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = []\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ])\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          )\n\n          // Closing.\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ])\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code\n    effects.enter('attentionSequence')\n    return inside(code)\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    const token = effects.exit('attentionSequence')\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code)\n\n    // Always populated by defaults.\n\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {undefined}\n */\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1\n      return schemeInsideOrEmailAtext(code)\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      size = 0\n      return urlInside\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n    size = 0\n    return emailAtext(code)\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return urlInside\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      return emailAtSignOrDot\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n    return emailValue(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel\n      effects.consume(code)\n      return next\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code> | undefined} */\n  let marker\n  /** @type {number} */\n  let index\n  /** @type {State} */\n  let returnState\n  return start\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      index = 0\n      return cdataOpenInside\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n    return nok(code)\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return nok(code)\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return comment\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return comment(code)\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62\n      ? end(code)\n      : code === 45\n      ? commentClose(code)\n      : comment(code)\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === value.length ? cdata : cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return cdata\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return declaration\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return instruction\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return tagCloseBetween(code)\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    return tagOpenAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n    return tagOpenBetween(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      marker = undefined\n      return tagOpenAttributeValueQuotedAfter\n    }\n    if (code === null) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n    return nok(code)\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineEndingAfter\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code)\n      ? factorySpace(\n          effects,\n          lineEndingAfterPrefix,\n          'linePrefix',\n          self.parser.constructs.disable.null.includes('codeIndented')\n            ? undefined\n            : 4\n        )(code)\n      : lineEndingAfterPrefix(code)\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n  let index\n  /** @type {number | undefined} */\n  let enter\n\n  // If we start and end with an EOL or a space.\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1\n  tailExitIndex++\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n      enter = undefined\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n  let size\n  /** @type {Token} */\n  let token\n  return start\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n    effects.exit('codeTextSequence')\n    return between(code)\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return between\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return sequenceClose(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return between\n    }\n\n    // Data.\n    effects.enter('codeTextData')\n    return data(code)\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return between(code)\n    }\n    effects.consume(code)\n    return data\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return sequenceClose\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    }\n\n    // More or less accents: mark as data.\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n}\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').Create} Create\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n */\n\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {string, text} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n * @returns {ParseContext}\n */\nexport function parse(options) {\n  const settings = options || {}\n  const constructs =\n    /** @type {FullNormalizedExtension} */\n    combineExtensions([defaultConstructs, ...(settings.extensions || [])])\n\n  /** @type {ParseContext} */\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n\n  /**\n   * @param {InitialConstruct} initial\n   */\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {boolean | null | undefined} [end=false]\n * @returns {Array<Chunk>}\n */\n\nconst search = /[\\0\\t\\n\\r]/g\n\n/**\n * @returns {Preprocessor}\n */\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean | undefined} */\n  let start = true\n  /** @type {boolean | undefined} */\n  let atCarriageReturn\n  return preprocessor\n\n  /** @type {Preprocessor} */\n  // eslint-disable-next-line complexity\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray | null} */\n    let match\n    /** @type {number} */\n    let next\n    /** @type {number} */\n    let startPosition\n    /** @type {number} */\n    let endPosition\n    /** @type {Code} */\n    let code\n    value =\n      buffer +\n      (typeof value === 'string'\n        ? value.toString()\n        : new TextDecoder(encoding || undefined).decode(value))\n    startPosition = 0\n    buffer = ''\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n      start = undefined\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n            while (column++ < next) chunks.push(-1)\n            break\n          }\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n      startPosition = endPosition + 1\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n    return chunks\n  }\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCharCode(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base)\n  if (\n    // C0 except for HT, LF, FF, CR, space.\n    code < 9 ||\n    code === 11 ||\n    (code > 13 && code < 32) ||\n    // Control character (DEL) of C0, and C1 controls.\n    (code > 126 && code < 160) ||\n    // Lone high surrogates and low surrogates.\n    (code > 55_295 && code < 57_344) ||\n    // Noncharacters.\n    (code > 64_975 && code < 65_008) /* eslint-disable no-bitwise */ ||\n    (code & 65_535) === 65_535 ||\n    (code & 65_535) === 65_534 /* eslint-enable no-bitwise */ ||\n    // Out of range\n    code > 1_114_111\n  ) {\n    return '\\uFFFD'\n  }\n  return String.fromCharCode(code)\n}\n","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0)\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').Html} Html\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n *\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Omit<Parent, 'children' | 'type'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | null | undefined | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {undefined | void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {undefined}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {undefined}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Fragment | Nodes>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {(this: CompileContext) => undefined} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {(this: CompileContext, node: Nodes, token: Token, onError?: OnEnterError) => undefined} enter\n *   Enter a node.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => undefined} exit\n *   Exit a node.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n * @property {CompileData} data\n *   Info passed around; key/value store.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n\nimport {toString} from 'mdast-util-to-string'\nimport {parse, postprocess, preprocess} from 'micromark'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nconst own = {}.hasOwnProperty\n\n/**\n * Turn markdown into a syntax tree.\n *\n * @overload\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @overload\n * @param {Value} value\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @param {Value} value\n *   Markdown to parse.\n * @param {Encoding | Options | null | undefined} [encoding]\n *   Character encoding for when `value` is `Buffer`.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {Root}\n *   mdast tree.\n */\nexport function fromMarkdown(value, encoding, options) {\n  if (typeof encoding !== 'string') {\n    options = encoding\n    encoding = undefined\n  }\n  return compiler(options)(\n    postprocess(\n      parse(options).document().write(preprocess()(value, encoding, true))\n    )\n  )\n}\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  }\n  configure(config, (options || {}).mdastExtensions || [])\n\n  /** @type {CompileData} */\n  const data = {}\n  return compile\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    }\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      data\n    }\n    /** @type {Array<number>} */\n    const listStack = []\n    let index = -1\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: events[index][2].sliceSerialize\n            },\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(\n        events.length > 0\n          ? events[0][1].start\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      )\n    }\n\n    // Call transforms.\n    index = -1\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n    return tree\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token | undefined} */\n    let listItem\n    /** @type {number | undefined} */\n    let lineIndex\n    /** @type {number | undefined} */\n    let firstBlankLineIndex\n    /** @type {boolean | undefined} */\n    let atMarker\n    while (++index <= length) {\n      const event = events[index]\n      switch (event[1].type) {\n        case 'listUnordered':\n        case 'listOrdered':\n        case 'blockQuote': {\n          if (event[0] === 'enter') {\n            containerBalance++\n          } else {\n            containerBalance--\n          }\n          atMarker = undefined\n          break\n        }\n        case 'lineEndingBlank': {\n          if (event[0] === 'enter') {\n            if (\n              listItem &&\n              !atMarker &&\n              !containerBalance &&\n              !firstBlankLineIndex\n            ) {\n              firstBlankLineIndex = index\n            }\n            atMarker = undefined\n          }\n          break\n        }\n        case 'linePrefix':\n        case 'listItemValue':\n        case 'listItemMarker':\n        case 'listItemPrefix':\n        case 'listItemPrefixWhitespace': {\n          // Empty.\n\n          break\n        }\n        default: {\n          atMarker = undefined\n        }\n      }\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === 'listItemPrefix') ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === 'listUnordered' ||\n            event[1].type === 'listOrdered'))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n            if (\n              tailEvent[1].type === 'lineEnding' ||\n              tailEvent[1].type === 'lineEndingBlank'\n            ) {\n              if (tailEvent[0] === 'exit') continue\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank'\n                listSpread = true\n              }\n              tailEvent[1].type = 'lineEnding'\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === 'linePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\n              tailEvent[1].type === 'blockQuoteMarker' ||\n              tailEvent[1].type === 'listItemIndent'\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            listItem._spread = true\n          }\n\n          // Fix position.\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        }\n\n        // Create a new list item.\n        if (event[1].type === 'listItemPrefix') {\n          /** @type {Token} */\n          const item = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          }\n          listItem = item\n          events.splice(index, 0, ['enter', item, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    }\n    events[start][1]._spread = listSpread\n    return length\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Nodes} create\n   *   Create a node.\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {undefined}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    })\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Nodes} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children\n    siblings.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler])\n    node.position = {\n      start: point(token.start),\n      // @ts-expect-error: `end` will be patched later.\n      end: undefined\n    }\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    const open = this.tokenStack.pop()\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({\n            start: token.start,\n            end: token.end\n          }) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n    node.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop())\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    this.data.expectingFirstListItemValue = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (this.data.expectingFirstListItemValue) {\n      const ancestor = this.stack[this.stack.length - 2]\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\n      this.data.expectingFirstListItemValue = undefined\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.lang = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.meta = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (this.data.flowCodeInside) return\n    this.buffer()\n    this.data.flowCodeInside = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    this.data.flowCodeInside = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n      node.depth = depth\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    this.data.setextHeadingSlurpLineEnding = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    node.depth = this.sliceSerialize(token).codePointAt(0) === 61 ? 1 : 2\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    this.data.setextHeadingSlurpLineEnding = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1]\n    /** @type {Array<Nodes>} */\n    const siblings = node.children\n    let tail = siblings[siblings.length - 1]\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text()\n      tail.position = {\n        start: point(token.start),\n        // @ts-expect-error: we’ll add `end` later.\n        end: undefined\n      }\n      siblings.push(tail)\n    }\n    this.stack.push(tail)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n    // If we’re at a hard break, include the line ending in there.\n    if (this.data.atHardBreak) {\n      const tail = context.children[context.children.length - 1]\n      tail.position.end = point(token.end)\n      this.data.atHardBreak = undefined\n      return\n    }\n    if (\n      !this.data.setextHeadingSlurpLineEnding &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    this.data.atHardBreak = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    this.data.referenceType = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    this.data.referenceType = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token)\n    const ancestor = this.stack[this.stack.length - 2]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string)\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1]\n    const value = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // Assume a reference.\n    this.data.inReference = true\n    if (node.type === 'link') {\n      /** @type {Array<PhrasingContent>} */\n      const children = fragment.children\n      node.children = children\n    } else {\n      node.alt = value\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    this.data.inReference = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    this.data.referenceType = 'collapsed'\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    this.data.referenceType = 'full'\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    this.data.characterReferenceType = token.type\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = this.data.characterReferenceType\n    /** @type {string} */\n    let value\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\n      )\n      this.data.characterReferenceType = undefined\n    } else {\n      const result = decodeNamedCharacterReference(data)\n      value = result\n    }\n    const tail = this.stack.pop()\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    }\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    }\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    }\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    }\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    return {\n      type: 'heading',\n      // @ts-expect-error `depth` will be set later.\n      depth: 0,\n      children: []\n    }\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    }\n  }\n\n  /** @returns {Html} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    }\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    }\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    }\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    }\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    }\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    }\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Array<Extension> | Extension>} extensions\n * @returns {undefined}\n */\nfunction configure(combined, extensions) {\n  let index = -1\n  while (++index < extensions.length) {\n    const value = extensions[index]\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {undefined}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      switch (key) {\n        case 'canContainEols': {\n          const right = extension[key]\n          if (right) {\n            combined[key].push(...right)\n          }\n          break\n        }\n        case 'transforms': {\n          const right = extension[key]\n          if (right) {\n            combined[key].push(...right)\n          }\n          break\n        }\n        case 'enter':\n        case 'exit': {\n          const right = extension[key]\n          if (right) {\n            Object.assign(combined[key], right)\n          }\n          break\n        }\n        // No default\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({\n          start: left.start,\n          end: left.end\n        }) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is still open'\n    )\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} FromMarkdownOptions\n * @typedef {import('unified').Parser<Root>} Parser\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\n/**\n * @typedef {Omit<FromMarkdownOptions, 'extensions' | 'mdastExtensions'>} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * Aadd support for parsing from markdown.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkParse(options) {\n  /** @type {Processor} */\n  // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.\n  const self = this\n\n  self.parser = parser\n\n  /**\n   * @type {Parser}\n   */\n  function parser(doc) {\n    return fromMarkdown(doc, {\n      ...self.data('settings'),\n      ...options,\n      // Note: these options are not in the readme.\n      // The goal is for them to be set by plugins on `data` instead of being\n      // passed by users.\n      extensions: self.data('micromarkExtensions') || [],\n      mdastExtensions: self.data('fromMarkdownExtensions') || []\n    })\n  }\n}\n","export const VOID       = -1;\nexport const PRIMITIVE  = 0;\nexport const ARRAY      = 1;\nexport const OBJECT     = 2;\nexport const DATE       = 3;\nexport const REGEXP     = 4;\nexport const MAP        = 5;\nexport const SET        = 6;\nexport const ERROR      = 7;\nexport const BIGINT     = 8;\n// export const SYMBOL = 9;\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst env = typeof self === 'object' ? self : globalThis;\n\nconst deserializer = ($, _) => {\n  const as = (out, index) => {\n    $.set(index, out);\n    return out;\n  };\n\n  const unpair = index => {\n    if ($.has(index))\n      return $.get(index);\n\n    const [type, value] = _[index];\n    switch (type) {\n      case PRIMITIVE:\n      case VOID:\n        return as(value, index);\n      case ARRAY: {\n        const arr = as([], index);\n        for (const index of value)\n          arr.push(unpair(index));\n        return arr;\n      }\n      case OBJECT: {\n        const object = as({}, index);\n        for (const [key, index] of value)\n          object[unpair(key)] = unpair(index);\n        return object;\n      }\n      case DATE:\n        return as(new Date(value), index);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as(new RegExp(source, flags), index);\n      }\n      case MAP: {\n        const map = as(new Map, index);\n        for (const [key, index] of value)\n          map.set(unpair(key), unpair(index));\n        return map;\n      }\n      case SET: {\n        const set = as(new Set, index);\n        for (const index of value)\n          set.add(unpair(index));\n        return set;\n      }\n      case ERROR: {\n        const {name, message} = value;\n        return as(new env[name](message), index);\n      }\n      case BIGINT:\n        return as(BigInt(value), index);\n      case 'BigInt':\n        return as(Object(BigInt(value)), index);\n    }\n    return as(new env[type](value), index);\n  };\n\n  return unpair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns a deserialized value from a serialized array of Records.\n * @param {Record[]} serialized a previously serialized value.\n * @returns {any}\n */\nexport const deserialize = serialized => deserializer(new Map, serialized)(0);\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst EMPTY = '';\n\nconst {toString} = {};\nconst {keys} = Object;\n\nconst typeOf = value => {\n  const type = typeof value;\n  if (type !== 'object' || !value)\n    return [PRIMITIVE, type];\n\n  const asString = toString.call(value).slice(8, -1);\n  switch (asString) {\n    case 'Array':\n      return [ARRAY, EMPTY];\n    case 'Object':\n      return [OBJECT, EMPTY];\n    case 'Date':\n      return [DATE, EMPTY];\n    case 'RegExp':\n      return [REGEXP, EMPTY];\n    case 'Map':\n      return [MAP, EMPTY];\n    case 'Set':\n      return [SET, EMPTY];\n  }\n\n  if (asString.includes('Array'))\n    return [ARRAY, asString];\n\n  if (asString.includes('Error'))\n    return [ERROR, asString];\n\n  return [OBJECT, asString];\n};\n\nconst shouldSkip = ([TYPE, type]) => (\n  TYPE === PRIMITIVE &&\n  (type === 'function' || type === 'symbol')\n);\n\nconst serializer = (strict, json, $, _) => {\n\n  const as = (out, value) => {\n    const index = _.push(out) - 1;\n    $.set(value, index);\n    return index;\n  };\n\n  const pair = value => {\n    if ($.has(value))\n      return $.get(value);\n\n    let [TYPE, type] = typeOf(value);\n    switch (TYPE) {\n      case PRIMITIVE: {\n        let entry = value;\n        switch (type) {\n          case 'bigint':\n            TYPE = BIGINT;\n            entry = value.toString();\n            break;\n          case 'function':\n          case 'symbol':\n            if (strict)\n              throw new TypeError('unable to serialize ' + type);\n            entry = null;\n            break;\n          case 'undefined':\n            return as([VOID], value);\n        }\n        return as([TYPE, entry], value);\n      }\n      case ARRAY: {\n        if (type)\n          return as([type, [...value]], value);\n  \n        const arr = [];\n        const index = as([TYPE, arr], value);\n        for (const entry of value)\n          arr.push(pair(entry));\n        return index;\n      }\n      case OBJECT: {\n        if (type) {\n          switch (type) {\n            case 'BigInt':\n              return as([type, value.toString()], value);\n            case 'Boolean':\n            case 'Number':\n            case 'String':\n              return as([type, value.valueOf()], value);\n          }\n        }\n\n        if (json && ('toJSON' in value))\n          return pair(value.toJSON());\n\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const key of keys(value)) {\n          if (strict || !shouldSkip(typeOf(value[key])))\n            entries.push([pair(key), pair(value[key])]);\n        }\n        return index;\n      }\n      case DATE:\n        return as([TYPE, value.toISOString()], value);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as([TYPE, {source, flags}], value);\n      }\n      case MAP: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const [key, entry] of value) {\n          if (strict || !(shouldSkip(typeOf(key)) || shouldSkip(typeOf(entry))))\n            entries.push([pair(key), pair(entry)]);\n        }\n        return index;\n      }\n      case SET: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const entry of value) {\n          if (strict || !shouldSkip(typeOf(entry)))\n            entries.push(pair(entry));\n        }\n        return index;\n      }\n    }\n\n    const {message} = value;\n    return as([TYPE, {name: type, message}], value);\n  };\n\n  return pair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} value a serializable value.\n * @param {{json?: boolean, lossy?: boolean}?} options an object with a `lossy` or `json` property that,\n *  if `true`, will not throw errors on incompatible types, and behave more\n *  like JSON stringify would behave. Symbol and Function will be discarded.\n * @returns {Record[]}\n */\n export const serialize = (value, {json, lossy} = {}) => {\n  const _ = [];\n  return serializer(!(json || lossy), !!json, new Map, _)(value), _;\n};\n","import {deserialize} from './deserialize.js';\nimport {serialize} from './serialize.js';\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} any a serializable value.\n * @param {{transfer?: any[], json?: boolean, lossy?: boolean}?} options an object with\n * a transfer option (ignored when polyfilled) and/or non standard fields that\n * fallback to the polyfill if present.\n * @returns {Record[]}\n */\nexport default typeof structuredClone === \"function\" ?\n  /* c8 ignore start */\n  (any, options) => (\n    options && ('json' in options || 'lossy' in options) ?\n      deserialize(serialize(any, options)) : structuredClone(any)\n  ) :\n  (any, options) => deserialize(serialize(any, options));\n  /* c8 ignore stop */\n\nexport {deserialize, serialize};\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @callback FootnoteBackContentTemplate\n *   Generate content for the backreference dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent> | ElementContent | string}\n *   Content for the backreference when linking back from definitions to their\n *   reference.\n *\n * @callback FootnoteBackLabelTemplate\n *   Generate a back label dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Back label to use when linking back from definitions to their reference.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate the default content that GitHub uses on backreferences.\n *\n * @param {number} _\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent>}\n *   Content.\n */\nexport function defaultFootnoteBackContent(_, rereferenceIndex) {\n  /** @type {Array<ElementContent>} */\n  const result = [{type: 'text', value: '↩'}]\n\n  if (rereferenceIndex > 1) {\n    result.push({\n      type: 'element',\n      tagName: 'sup',\n      properties: {},\n      children: [{type: 'text', value: String(rereferenceIndex)}]\n    })\n  }\n\n  return result\n}\n\n/**\n * Generate the default label that GitHub uses on backreferences.\n *\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Label.\n */\nexport function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n  return (\n    'Back to reference ' +\n    (referenceIndex + 1) +\n    (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n  )\n}\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\n// eslint-disable-next-line complexity\nexport function footer(state) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const footnoteBackContent =\n    state.options.footnoteBackContent || defaultFootnoteBackContent\n  const footnoteBackLabel =\n    state.options.footnoteBackLabel || defaultFootnoteBackLabel\n  const footnoteLabel = state.options.footnoteLabel || 'Footnotes'\n  const footnoteLabelTagName = state.options.footnoteLabelTagName || 'h2'\n  const footnoteLabelProperties = state.options.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let referenceIndex = -1\n\n  while (++referenceIndex < state.footnoteOrder.length) {\n    const def = state.footnoteById.get(state.footnoteOrder[referenceIndex])\n\n    if (!def) {\n      continue\n    }\n\n    const content = state.all(def)\n    const id = String(def.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let rereferenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n    const counts = state.footnoteCounts.get(id)\n\n    // eslint-disable-next-line no-unmodified-loop-condition\n    while (counts !== undefined && ++rereferenceIndex <= counts) {\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      let children =\n        typeof footnoteBackContent === 'string'\n          ? footnoteBackContent\n          : footnoteBackContent(referenceIndex, rereferenceIndex)\n\n      if (typeof children === 'string') {\n        children = {type: 'text', value: children}\n      }\n\n      backReferences.push({\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            clobberPrefix +\n            'fnref-' +\n            safeId +\n            (rereferenceIndex > 1 ? '-' + rereferenceIndex : ''),\n          dataFootnoteBackref: '',\n          ariaLabel:\n            typeof footnoteBackLabel === 'string'\n              ? footnoteBackLabel\n              : footnoteBackLabel(referenceIndex, rereferenceIndex),\n          className: ['data-footnote-backref']\n        },\n        children: Array.isArray(children) ? children : [children]\n      })\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(def, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: footnoteLabelTagName,\n        properties: {\n          ...structuredClone(footnoteLabelProperties),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n// To do: use types from `unist-util-visit-parents` when it’s released.\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends UnistNode ? number | undefined : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [Ancestor=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\n *   Build a typed `Visitor` function from a node and all possible parents.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Visited\n *   Node type.\n * @template {UnistParent} Ancestor\n *   Parent type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     Matches<Descendant, Check>,\n *     Extract<Descendant, UnistParent>\n *   >\n * )} BuildVisitorFromDescendants\n *   Build a typed `Visitor` function from a list of descendants and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Node type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} testOrVisitor\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\n *   Handle each node (when test is omitted, pass `reverse`).\n * @param {boolean | null | undefined} [maybeReverse=false]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\n  /** @type {boolean | null | undefined} */\n  let reverse\n  /** @type {Test} */\n  let test\n  /** @type {Visitor} */\n  let visitor\n\n  if (\n    typeof testOrVisitor === 'function' &&\n    typeof visitorOrReverse !== 'function'\n  ) {\n    test = undefined\n    visitor = testOrVisitor\n    reverse = visitorOrReverse\n  } else {\n    // @ts-expect-error: assume the overload with test was given.\n    test = testOrVisitor\n    // @ts-expect-error: assume the overload with test was given.\n    visitor = visitorOrReverse\n    reverse = maybeReverse\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  /**\n   * @param {UnistNode} node\n   * @param {Array<UnistParent>} parents\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1]\n    const index = parent ? parent.children.indexOf(node) : undefined\n    return visitor(node, index, parent)\n  }\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Reference} Reference\n *\n * @typedef {import('./state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Extract<Nodes, Reference>} node\n *   Reference node (image, link).\n * @returns {Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return [{type: 'text', value: '![' + node.alt + suffix}]\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === null || spread === undefined\n    ? node.children.length > 1\n    : spread\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n *\n * @satisfies {import('../state.js').Handlers}\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  // @ts-expect-error: root is different, but hard to type.\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  /** @type {Properties} */\n  const properties = {}\n\n  if (node.lang) {\n    properties.className = ['language-' + node.lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  let reuseCounter = state.footnoteCounts.get(id)\n\n  if (reuseCounter === undefined) {\n    reuseCounter = 0\n    state.footnoteOrder.push(id)\n    counter = state.footnoteOrder.length\n  } else {\n    counter = index + 1\n  }\n\n  reuseCounter += 1\n  state.footnoteCounts.set(id, reuseCounter)\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + clobberPrefix + 'fn-' + safeId,\n      id:\n        clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Html} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Element | Raw | undefined}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.options.allowDangerousHtml) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const def = state.definitionById.get(id)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(def.url || ''), alt: node.alt}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const def = state.definitionById.get(id)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(def.url || '')}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Parents} HastParents\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastParents}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointEnd, pointStart} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start && end) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  // To do: option to use `style`?\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(cell, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastElement | HastText}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').RootContent} HastRootContent\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('mdast').Parents} MdastParents\n *\n * @typedef {import('./footer.js').FootnoteBackContentTemplate} FootnoteBackContentTemplate\n * @typedef {import('./footer.js').FootnoteBackLabelTemplate} FootnoteBackLabelTemplate\n */\n\n/**\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | undefined} parent\n *   Parent of `node`.\n * @returns {Array<HastElementContent> | HastElementContent | undefined}\n *   hast node.\n *\n * @typedef {Partial<Record<MdastNodes['type'], Handler>>} Handlers\n *   Handle nodes.\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree (default:\n *   `false`).\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` property on footnotes to prevent them from\n *   *clobbering* (default: `'user-content-'`).\n *\n *   Pass `''` for trusted markdown and when you are careful with\n *   polyfilling.\n *   You could pass a different prefix.\n *\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=\"x\"></p>\n *   <script>alert(x) // `x` now refers to the `p#x` DOM element</script>\n *   ```\n *\n *   The above example shows that elements are made available by browsers, by\n *   their ID, on the `window` object.\n *   This is a security risk because you might be expecting some other variable\n *   at that place.\n *   It can also break polyfills.\n *   Using a prefix solves these problems.\n * @property {FootnoteBackContentTemplate | string | null | undefined} [footnoteBackContent]\n *   Content of the backreference back to references (default: `defaultFootnoteBackContent`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackContent(_, rereferenceIndex) {\n *     const result = [{type: 'text', value: '↩'}]\n *\n *     if (rereferenceIndex > 1) {\n *       result.push({\n *         type: 'element',\n *         tagName: 'sup',\n *         properties: {},\n *         children: [{type: 'text', value: String(rereferenceIndex)}]\n *       })\n *     }\n *\n *     return result\n *   }\n *   ```\n *\n *   This content is used in the `a` element of each backreference (the `↩`\n *   links).\n * @property {FootnoteBackLabelTemplate | string | null | undefined} [footnoteBackLabel]\n *   Label to describe the backreference back to references (default:\n *   `defaultFootnoteBackLabel`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n *    return (\n *      'Back to reference ' +\n *      (referenceIndex + 1) +\n *      (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n *    )\n *   }\n *   ```\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is used in the `ariaLabel` property on each backreference\n *   (the `↩` links).\n *   It affects users of assistive technology.\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Textual label to use for the footnotes section (default: `'Footnotes'`).\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (default: `{className:\n *   ['sr-only']}`).\n *\n *   Change it to show the label and add other properties.\n *\n *   This label is typically hidden visually (assuming an `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass an empty string.\n *   You can also add different properties.\n *\n *   > 👉 **Note**: `id: 'footnote-label'` is always added, because footnote\n *   > calls use it with `aria-describedby` to provide an accessible label.\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   HTML tag name to use for the footnote label element (default: `'h2'`).\n *\n *   Change it to match your document structure.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes (optional).\n * @property {Array<MdastNodes['type']> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed)\n *   (optional).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes (optional).\n *\n * @typedef State\n *   Info passed around.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => HastElement | Type} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {Map<string, MdastDefinition>} definitionById\n *   Definitions by their identifier.\n * @property {Map<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Map<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {(node: MdastNodes, parent: MdastParents | undefined) => Array<HastElementContent> | HastElementContent | undefined} one\n *   Transform an mdast node to hast.\n * @property {Options} options\n *   Configuration.\n * @property {(from: MdastNodes, node: HastNodes) => undefined} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastRootContent>(nodes: Array<Type>, loose?: boolean | undefined) => Array<HastText | Type>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {visit} from 'unist-util-visit'\nimport {position} from 'unist-util-position'\nimport {handlers as defaultHandlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || emptyOptions\n  /** @type {Map<string, MdastDefinition>} */\n  const definitionById = new Map()\n  /** @type {Map<string, MdastFootnoteDefinition>} */\n  const footnoteById = new Map()\n  /** @type {Map<string, number>} */\n  const footnoteCounts = new Map()\n  /** @type {Handlers} */\n  // @ts-expect-error: the root handler returns a root.\n  // Hard to type.\n  const handlers = {...defaultHandlers, ...settings.handlers}\n\n  /** @type {State} */\n  const state = {\n    all,\n    applyData,\n    definitionById,\n    footnoteById,\n    footnoteCounts,\n    footnoteOrder: [],\n    handlers,\n    one,\n    options: settings,\n    patch,\n    wrap\n  }\n\n  visit(tree, function (node) {\n    if (node.type === 'definition' || node.type === 'footnoteDefinition') {\n      const map = node.type === 'definition' ? definitionById : footnoteById\n      const id = String(node.identifier).toUpperCase()\n\n      // Mimick CM behavior of link definitions.\n      // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/9032189/lib/index.js#L20-L21>.\n      if (!map.has(id)) {\n        // @ts-expect-error: node type matches map.\n        map.set(id, node)\n      }\n    }\n  })\n\n  return state\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {Array<HastElementContent> | HastElementContent | undefined}\n   *   Resulting hast node.\n   */\n  function one(node, parent) {\n    const type = node.type\n    const handle = state.handlers[type]\n\n    if (own.call(state.handlers, type) && handle) {\n      return handle(state, node, parent)\n    }\n\n    if (state.options.passThrough && state.options.passThrough.includes(type)) {\n      if ('children' in node) {\n        const {children, ...shallow} = node\n        const result = structuredClone(shallow)\n        // @ts-expect-error: TS doesn’t understand…\n        result.children = state.all(node)\n        // @ts-expect-error: TS doesn’t understand…\n        return result\n      }\n\n      // @ts-expect-error: it’s custom.\n      return structuredClone(node)\n    }\n\n    const unknown = state.options.unknownHandler || defaultUnknownHandler\n\n    return unknown(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function all(parent) {\n    /** @type {Array<HastElementContent>} */\n    const values = []\n\n    if ('children' in parent) {\n      const nodes = parent.children\n      let index = -1\n      while (++index < nodes.length) {\n        const result = state.one(nodes[index], parent)\n\n        // To do: see if we van clean this? Can we merge texts?\n        if (result) {\n          if (index && nodes[index - 1].type === 'break') {\n            if (!Array.isArray(result) && result.type === 'text') {\n              result.value = trimMarkdownSpaceStart(result.value)\n            }\n\n            if (!Array.isArray(result) && result.type === 'element') {\n              const head = result.children[0]\n\n              if (head && head.type === 'text') {\n                head.value = trimMarkdownSpaceStart(head.value)\n              }\n            }\n          }\n\n          if (Array.isArray(result)) {\n            values.push(...result)\n          } else {\n            values.push(result)\n          }\n        }\n      }\n    }\n\n    return values\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {undefined}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {HastElement | Type}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {HastElement | Type} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent of `hName` is to create an element, but likely also to keep\n      // the content around (otherwise: pass `hChildren`).\n      else {\n        /** @type {Array<HastElementContent>} */\n        // @ts-expect-error: assume no doctypes in `root`.\n        const children = 'children' in result ? result.children : [result]\n        result = {type: 'element', tagName: hName, properties: {}, children}\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      Object.assign(result.properties, structuredClone(hProperties))\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastElement | HastText}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastElement | HastText} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: state.all(node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastRootContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | undefined} [loose=false]\n *   Whether to add line endings at start and end (default: `false`).\n * @returns {Array<HastText | Type>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<HastText | Type>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n\n/**\n * Trim spaces and tabs at the start of `value`.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Result.\n */\nfunction trimMarkdownSpaceStart(value) {\n  let index = 0\n  let code = value.charCodeAt(index)\n\n  while (code === 9 || code === 32) {\n    index++\n    code = value.charCodeAt(index)\n  }\n\n  return value.slice(index)\n}\n","/**\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('./state.js').Options} Options\n */\n\nimport {ok as assert} from 'devlop'\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {HastNodes}\n *   hast tree.\n */\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, undefined)\n  const foot = footer(state)\n  /** @type {HastNodes} */\n  const result = Array.isArray(node)\n    ? {type: 'root', children: node}\n    : node || {type: 'root', children: []}\n\n  if (foot) {\n    // If there’s a footer, there were definitions, meaning block\n    // content.\n    // So `result` is a parent node.\n    assert('children' in result)\n    result.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  return result\n}\n","// Include `data` fields in mdast and `raw` nodes in hast.\n/// <reference types=\"mdast-util-to-hast\" />\n\n/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('mdast-util-to-hast').Options} Options\n * @typedef {import('unified').Processor} Processor\n * @typedef {import('vfile').VFile} VFile\n */\n\n/**\n * @callback TransformBridge\n *   Bridge-mode.\n *\n *   Runs the destination with the new hast tree.\n *   Discards result.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {Promise<undefined>}\n *   Nothing.\n *\n * @callback TransformMutate\n *  Mutate-mode.\n *\n *  Further transformers run on the hast tree.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {HastRoot}\n *   Tree (hast).\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n/**\n * Turn markdown into HTML.\n *\n * ##### Notes\n *\n * ###### Signature\n *\n * *   if a processor is given, runs the (rehype) plugins used on it with a\n *     hast tree, then discards the result (*bridge mode*)\n * *   otherwise, returns a hast tree, the plugins used after `remarkRehype`\n *     are rehype plugins (*mutate mode*)\n *\n * > 👉 **Note**: It’s highly unlikely that you want to pass a `processor`.\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most plugins ignore `raw` nodes but two notable ones don’t:\n *\n * *   `rehype-stringify` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful if\n *     you completely trust authors\n * *   `rehype-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only way\n *     to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `remark-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * *Example: headings (DOM clobbering)* in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @overload\n * @param {Processor} processor\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformBridge}\n *\n * @overload\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformMutate}\n *\n * @param {Readonly<Options> | Processor | null | undefined} [destination]\n *   Processor or configuration (optional).\n * @param {Readonly<Options> | null | undefined} [options]\n *   When a processor was given, configuration (optional).\n * @returns {TransformBridge | TransformMutate}\n *   Transform.\n */\nexport default function remarkRehype(destination, options) {\n  if (destination && 'run' in destination) {\n    /**\n     * @type {TransformBridge}\n     */\n    return async function (tree, file) {\n      // Cast because root in -> root out.\n      const hastTree = /** @type {HastRoot} */ (toHast(tree, options))\n      await destination.run(hastTree, file)\n    }\n  }\n\n  /**\n   * @type {TransformMutate}\n   */\n  return function (tree) {\n    // Cast because root in -> root out.\n    return /** @type {HastRoot} */ (toHast(tree, options || destination))\n  }\n}\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","/**\n * @typedef {(error?: Error|null|undefined, ...output: Array<any>) => void} Callback\n * @typedef {(...input: Array<any>) => any} Middleware\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add `fn` (middleware) to the list.\n * @typedef {{run: Run, use: Use}} Pipeline\n *   Middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error|null|undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware`.\n * Can be sync or async; return a promise, receive a callback, or return new\n * values and errors.\n *\n * @param {Middleware} middleware\n * @param {Callback} callback\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result instanceof Promise) {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const path = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | null | undefined} [ext]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, ext) {\n  if (ext !== undefined && typeof ext !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (ext === undefined || ext.length === 0 || ext.length > path.length) {\n    while (index--) {\n      if (path.codePointAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (ext === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extIndex = ext.length - 1\n\n  while (index--) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.codePointAt(index) === ext.codePointAt(extIndex--)) {\n          if (extIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.codePointAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.codePointAt(0) === 47 /* `/` */\n    ? '//'\n    : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.codePointAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.codePointAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.codePointAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.codePointAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.codePointAt(result.length - 1) !== 46 /* `.` */ ||\n          result.codePointAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const proc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * Checks if a value has the shape of a WHATWG URL object.\n *\n * Using a symbol or instanceof would not be able to recognize URL objects\n * coming from other implementations (e.g. in Electron), so instead we are\n * checking some well known properties for a lack of a better test.\n *\n * We use `href` and `protocol` as they are the only properties that are\n * easy to retrieve and calculate due to the lazy nature of the getters.\n *\n * We check for auth attribute to distinguish legacy url instance with\n * WHATWG URL instance.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js#L720>\nexport function isUrl(fileUrlOrPath) {\n  return Boolean(\n    fileUrlOrPath !== null &&\n      typeof fileUrlOrPath === 'object' &&\n      'href' in fileUrlOrPath &&\n      fileUrlOrPath.href &&\n      'protocol' in fileUrlOrPath &&\n      fileUrlOrPath.protocol &&\n      // @ts-expect-error: indexing is fine.\n      fileUrlOrPath.auth === undefined\n  )\n}\n","import {isUrl} from './minurl.shared.js'\n\nexport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js>\n\n/**\n * @param {URL | string} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.codePointAt(index) === 37 /* `%` */ &&\n      pathname.codePointAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.codePointAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n * @typedef {import('vfile-message').Options} MessageOptions\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Value} Value\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef {Options | URL | VFile | Value} Compatible\n *   Things that can be passed to the constructor.\n *\n * @typedef VFileCoreOptions\n *   Set multiple values.\n * @property {string | null | undefined} [basename]\n *   Set `basename` (name).\n * @property {string | null | undefined} [cwd]\n *   Set `cwd` (working directory).\n * @property {Data | null | undefined} [data]\n *   Set `data` (associated info).\n * @property {string | null | undefined} [dirname]\n *   Set `dirname` (path w/o basename).\n * @property {string | null | undefined} [extname]\n *   Set `extname` (extension with dot).\n * @property {Array<string> | null | undefined} [history]\n *   Set `history` (paths the file moved between).\n * @property {URL | string | null | undefined} [path]\n *   Set `path` (current path).\n * @property {string | null | undefined} [stem]\n *   Set `stem` (name without extension).\n * @property {Value | null | undefined} [value]\n *   Set `value` (the contents of the file).\n *\n * @typedef Map\n *   Raw source map.\n *\n *   See:\n *   <https://github.com/mozilla/source-map/blob/60adcb0/source-map.d.ts#L15-L23>.\n * @property {number} version\n *   Which version of the source map spec this map is following.\n * @property {Array<string>} sources\n *   An array of URLs to the original source files.\n * @property {Array<string>} names\n *   An array of identifiers which can be referenced by individual mappings.\n * @property {string | undefined} [sourceRoot]\n *   The URL root from which all sources are relative.\n * @property {Array<string> | undefined} [sourcesContent]\n *   An array of contents of the original source files.\n * @property {string} mappings\n *   A string of base64 VLQs which contain the actual mappings.\n * @property {string} file\n *   The generated file this source map is associated with.\n *\n * @typedef {Record<string, unknown> & VFileCoreOptions} Options\n *   Configuration.\n *\n *   A bunch of keys that will be shallow copied over to the new file.\n *\n * @typedef {Record<string, unknown>} ReporterSettings\n *   Configuration for reporters.\n */\n\n/**\n * @template [Settings=ReporterSettings]\n *   Options type.\n * @callback Reporter\n *   Type for a reporter.\n * @param {Array<VFile>} files\n *   Files to report.\n * @param {Settings} options\n *   Configuration.\n * @returns {string}\n *   Report.\n */\n\nimport {VFileMessage} from 'vfile-message'\nimport {path} from 'vfile/do-not-use-conditional-minpath'\nimport {proc} from 'vfile/do-not-use-conditional-minproc'\nimport {urlToPath, isUrl} from 'vfile/do-not-use-conditional-minurl'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n */\nconst order = /** @type {const} */ ([\n  'history',\n  'path',\n  'basename',\n  'stem',\n  'extname',\n  'dirname'\n])\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Uint8Array` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else if (typeof value === 'string' || isUint8Array(value)) {\n      options = {value}\n    } else {\n      options = value\n    }\n\n    /* eslint-disable no-unused-expressions */\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    this.cwd = proc.cwd()\n\n    /**\n     * Place to store custom info (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of file paths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const prop = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        prop in options &&\n        options[prop] !== undefined &&\n        options[prop] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[prop] = prop === 'history' ? [...options[prop]] : options[prop]\n      }\n    }\n\n    /** @type {string} */\n    let prop\n\n    // Set non-path related properties.\n    for (prop in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(prop)) {\n        // @ts-expect-error: fine to set other things.\n        this[prop] = options[prop]\n      }\n    }\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   *\n   * @returns {string | undefined}\n   *   Basename.\n   */\n  get basename() {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} basename\n   *   Basename.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = path.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   *\n   * @returns {string | undefined}\n   *   Dirname.\n   */\n  get dirname() {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} dirname\n   *   Dirname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = path.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   *\n   * @returns {string | undefined}\n   *   Extname.\n   */\n  get extname() {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} extname\n   *   Extname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.codePointAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = path.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   *   Path.\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {URL | string} path\n   *   Path.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * @returns {string | undefined}\n   *   Stem.\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? path.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} stem\n   *   Stem.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  // Normal prototypal methods.\n  /**\n   * Create a fatal message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `true` (error; file not usable)\n   * and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Never.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n\n  /**\n   * Create an info message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `undefined` (info; change\n   * likely not needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = undefined\n\n    return message\n  }\n\n  /**\n   * Create a message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `false` (warning; change may be\n   * needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(causeOrReason, optionsOrParentOrPlace, origin) {\n    const message = new VFileMessage(\n      // @ts-expect-error: the overloads are fine.\n      causeOrReason,\n      optionsOrParentOrPlace,\n      origin\n    )\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * > **Note**: which encodings are supported depends on the engine.\n   * > For info on Node.js, see:\n   * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.\n   *\n   * @param {string | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Uint8Array`\n   *   (default: `'utf-8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    if (this.value === undefined) {\n      return ''\n    }\n\n    if (typeof this.value === 'string') {\n      return this.value\n    }\n\n    const decoder = new TextDecoder(encoding || undefined)\n    return decoder.decode(this.value)\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {undefined}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(path.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","export const CallableInstance =\n  /**\n   * @type {new <Parameters extends Array<unknown>, Result>(property: string | symbol) => (...parameters: Parameters) => Result}\n   */\n  (\n    /** @type {unknown} */\n    (\n      /**\n       * @this {Function}\n       * @param {string | symbol} property\n       * @returns {(...parameters: Array<unknown>) => unknown}\n       */\n      function (property) {\n        const self = this\n        const constr = self.constructor\n        const proto = /** @type {Record<string | symbol, Function>} */ (\n          // Prototypes do exist.\n          // type-coverage:ignore-next-line\n          constr.prototype\n        )\n        const func = proto[property]\n        /** @type {(...parameters: Array<unknown>) => unknown} */\n        const apply = function () {\n          return func.apply(apply, arguments)\n        }\n\n        Object.setPrototypeOf(apply, proto)\n\n        const names = Object.getOwnPropertyNames(func)\n\n        for (const p of names) {\n          const descriptor = Object.getOwnPropertyDescriptor(func, p)\n          if (descriptor) Object.defineProperty(apply, p, descriptor)\n        }\n\n        return apply\n      }\n    )\n  )\n","/**\n * @typedef {import('trough').Pipeline} Pipeline\n *\n * @typedef {import('unist').Node} Node\n *\n * @typedef {import('vfile').Compatible} Compatible\n * @typedef {import('vfile').Value} Value\n *\n * @typedef {import('../index.js').CompileResultMap} CompileResultMap\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Settings} Settings\n */\n\n/**\n * @typedef {CompileResultMap[keyof CompileResultMap]} CompileResults\n *   Acceptable results from compilers.\n *\n *   To register custom results, add them to\n *   {@link CompileResultMap `CompileResultMap`}.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the compiler receives (default: `Node`).\n * @template {CompileResults} [Result=CompileResults]\n *   The thing that the compiler yields (default: `CompileResults`).\n * @callback Compiler\n *   A **compiler** handles the compiling of a syntax tree to something else\n *   (in most cases, text) (TypeScript type).\n *\n *   It is used in the stringify phase and called with a {@link Node `Node`}\n *   and {@link VFile `VFile`} representation of the document to compile.\n *   It should return the textual representation of the given tree (typically\n *   `string`).\n *\n *   > 👉 **Note**: unified typically compiles by serializing: most compilers\n *   > return `string` (or `Uint8Array`).\n *   > Some compilers, such as the one configured with\n *   > [`rehype-react`][rehype-react], return other values (in this case, a\n *   > React tree).\n *   > If you’re using a compiler that doesn’t serialize, expect different\n *   > result values.\n *   >\n *   > To register custom results in TypeScript, add them to\n *   > {@link CompileResultMap `CompileResultMap`}.\n *\n *   [rehype-react]: https://github.com/rehypejs/rehype-react\n * @param {Tree} tree\n *   Tree to compile.\n * @param {VFile} file\n *   File associated with `tree`.\n * @returns {Result}\n *   New content: compiled text (`string` or `Uint8Array`, for `file.value`) or\n *   something else (for `file.result`).\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the parser yields (default: `Node`)\n * @callback Parser\n *   A **parser** handles the parsing of text to a syntax tree.\n *\n *   It is used in the parse phase and is called with a `string` and\n *   {@link VFile `VFile`} of the document to parse.\n *   It must return the syntax tree representation of the given file\n *   ({@link Node `Node`}).\n * @param {string} document\n *   Document to parse.\n * @param {VFile} file\n *   File associated with `document`.\n * @returns {Tree}\n *   Node representing the given file.\n */\n\n/**\n * @typedef {(\n *   Plugin<Array<any>, any, any> |\n *   PluginTuple<Array<any>, any, any> |\n *   Preset\n * )} Pluggable\n *   Union of the different ways to add plugins and settings.\n */\n\n/**\n * @typedef {Array<Pluggable>} PluggableList\n *   List of plugins and presets.\n */\n\n// Note: we can’t use `callback` yet as it messes up `this`:\n//  <https://github.com/microsoft/TypeScript/issues/55197>.\n/**\n * @template {Array<unknown>} [PluginParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=Node]\n *   Value that is expected as input (default: `Node`).\n *\n *   *   If the plugin returns a {@link Transformer `Transformer`}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@link Parser `Parser`}, this should be\n *       `string`.\n *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be the\n *       node it expects.\n * @template [Output=Input]\n *   Value that is yielded as output (default: `Input`).\n *\n *   *   If the plugin returns a {@link Transformer `Transformer`}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@link Parser `Parser`}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be\n *       result it yields.\n * @typedef {(\n *   (this: Processor, ...parameters: PluginParameters) =>\n *     Input extends string ? // Parser.\n *        Output extends Node | undefined ? undefined | void : never :\n *     Output extends CompileResults ? // Compiler.\n *        Input extends Node | undefined ? undefined | void : never :\n *     Transformer<\n *       Input extends Node ? Input : Node,\n *       Output extends Node ? Output : Node\n *     > | undefined | void\n * )} Plugin\n *   Single plugin.\n *\n *   Plugins configure the processors they are applied on in the following\n *   ways:\n *\n *   *   they change the processor, such as the parser, the compiler, or by\n *       configuring data\n *   *   they specify how to handle trees and files\n *\n *   In practice, they are functions that can receive options and configure the\n *   processor (`this`).\n *\n *   > 👉 **Note**: plugins are called when the processor is *frozen*, not when\n *   > they are applied.\n */\n\n/**\n * Tuple of a plugin and its configuration.\n *\n * The first item is a plugin, the rest are its parameters.\n *\n * @template {Array<unknown>} [TupleParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=undefined]\n *   Value that is expected as input (optional).\n *\n *   *   If the plugin returns a {@link Transformer `Transformer`}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@link Parser `Parser`}, this should be\n *       `string`.\n *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be the\n *       node it expects.\n * @template [Output=undefined] (optional).\n *   Value that is yielded as output.\n *\n *   *   If the plugin returns a {@link Transformer `Transformer`}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@link Parser `Parser`}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be\n *       result it yields.\n * @typedef {(\n *   [\n *     plugin: Plugin<TupleParameters, Input, Output>,\n *     ...parameters: TupleParameters\n *   ]\n * )} PluginTuple\n */\n\n/**\n * @typedef Preset\n *   Sharable configuration.\n *\n *   They can contain plugins and settings.\n * @property {PluggableList | undefined} [plugins]\n *   List of plugins and presets (optional).\n * @property {Settings | undefined} [settings]\n *   Shared settings for parsers and compilers (optional).\n */\n\n/**\n * @template {VFile} [File=VFile]\n *   The file that the callback receives (default: `VFile`).\n * @callback ProcessCallback\n *   Callback called when the process is done.\n *\n *   Called with either an error or a result.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {File | undefined} [file]\n *   Processed file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The tree that the callback receives (default: `Node`).\n * @callback RunCallback\n *   Callback called when transformers are done.\n *\n *   Called with either an error or results.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {Tree | undefined} [tree]\n *   Transformed tree (optional).\n * @param {VFile | undefined} [file]\n *   File (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Output=Node]\n *   Node type that the transformer yields (default: `Node`).\n * @callback TransformCallback\n *   Callback passed to transforms.\n *\n *   If the signature of a `transformer` accepts a third argument, the\n *   transformer may perform asynchronous operations, and must call it.\n * @param {Error | undefined} [error]\n *   Fatal error to stop the process (optional).\n * @param {Output | undefined} [tree]\n *   New, changed, tree (optional).\n * @param {VFile | undefined} [file]\n *   New, changed, file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Input=Node]\n *   Node type that the transformer expects (default: `Node`).\n * @template {Node} [Output=Input]\n *   Node type that the transformer yields (default: `Input`).\n * @callback Transformer\n *   Transformers handle syntax trees and files.\n *\n *   They are functions that are called each time a syntax tree and file are\n *   passed through the run phase.\n *   When an error occurs in them (either because it’s thrown, returned,\n *   rejected, or passed to `next`), the process stops.\n *\n *   The run phase is handled by [`trough`][trough], see its documentation for\n *   the exact semantics of these functions.\n *\n *   > 👉 **Note**: you should likely ignore `next`: don’t accept it.\n *   > it supports callback-style async work.\n *   > But promises are likely easier to reason about.\n *\n *   [trough]: https://github.com/wooorm/trough#function-fninput-next\n * @param {Input} tree\n *   Tree to handle.\n * @param {VFile} file\n *   File to handle.\n * @param {TransformCallback<Output>} next\n *   Callback.\n * @returns {(\n *   Promise<Output | undefined | void> |\n *   Promise<never> | // For some reason this is needed separately.\n *   Output |\n *   Error |\n *   undefined |\n *   void\n * )}\n *   If you accept `next`, nothing.\n *   Otherwise:\n *\n *   *   `Error` — fatal error to stop the process\n *   *   `Promise<undefined>` or `undefined` — the next transformer keeps using\n *       same tree\n *   *   `Promise<Node>` or `Node` — new, changed, tree\n */\n\n/**\n * @template {Node | undefined} ParseTree\n *   Output of `parse`.\n * @template {Node | undefined} HeadTree\n *   Input for `run`.\n * @template {Node | undefined} TailTree\n *   Output for `run`.\n * @template {Node | undefined} CompileTree\n *   Input of `stringify`.\n * @template {CompileResults | undefined} CompileResult\n *   Output of `stringify`.\n * @template {Node | string | undefined} Input\n *   Input of plugin.\n * @template Output\n *   Output of plugin (optional).\n * @typedef {(\n *   Input extends string\n *     ? Output extends Node | undefined\n *       ? // Parser.\n *         Processor<\n *           Output extends undefined ? ParseTree : Output,\n *           HeadTree,\n *           TailTree,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Output extends CompileResults\n *     ? Input extends Node | undefined\n *       ? // Compiler.\n *         Processor<\n *           ParseTree,\n *           HeadTree,\n *           TailTree,\n *           Input extends undefined ? CompileTree : Input,\n *           Output extends undefined ? CompileResult : Output\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Input extends Node | undefined\n *     ? Output extends Node | undefined\n *       ? // Transform.\n *         Processor<\n *           ParseTree,\n *           HeadTree extends undefined ? Input : HeadTree,\n *           Output extends undefined ? TailTree : Output,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : // Unknown.\n *       Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n * )} UsePlugin\n *   Create a processor based on the input/output of a {@link Plugin plugin}.\n */\n\n/**\n * @template {CompileResults | undefined} Result\n *   Node type that the transformer yields.\n * @typedef {(\n *   Result extends Value | undefined ?\n *     VFile :\n *     VFile & {result: Result}\n *   )} VFileWithOutput\n *   Type to generate a {@link VFile `VFile`} corresponding to a compiler result.\n *\n *   If a result that is not acceptable on a `VFile` is used, that will\n *   be stored on the `result` field of {@link VFile `VFile`}.\n */\n\nimport {bail} from 'bail'\nimport extend from 'extend'\nimport {ok as assert} from 'devlop'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\nimport {CallableInstance} from './callable-instance.js'\n\n// To do: next major: drop `Compiler`, `Parser`: prefer lowercase.\n\n// To do: we could start yielding `never` in TS when a parser is missing and\n// `parse` is called.\n// Currently, we allow directly setting `processor.parser`, which is untyped.\n\nconst own = {}.hasOwnProperty\n\n/**\n * @template {Node | undefined} [ParseTree=undefined]\n *   Output of `parse` (optional).\n * @template {Node | undefined} [HeadTree=undefined]\n *   Input for `run` (optional).\n * @template {Node | undefined} [TailTree=undefined]\n *   Output for `run` (optional).\n * @template {Node | undefined} [CompileTree=undefined]\n *   Input of `stringify` (optional).\n * @template {CompileResults | undefined} [CompileResult=undefined]\n *   Output of `stringify` (optional).\n * @extends {CallableInstance<[], Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>>}\n */\nexport class Processor extends CallableInstance {\n  /**\n   * Create a processor.\n   */\n  constructor() {\n    // If `Processor()` is called (w/o new), `copy` is called instead.\n    super('copy')\n\n    /**\n     * Compiler to use (deprecated).\n     *\n     * @deprecated\n     *   Use `compiler` instead.\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.Compiler = undefined\n\n    /**\n     * Parser to use (deprecated).\n     *\n     * @deprecated\n     *   Use `parser` instead.\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.Parser = undefined\n\n    // Note: the following fields are considered private.\n    // However, they are needed for tests, and TSC generates an untyped\n    // `private freezeIndex` field for, which trips `type-coverage` up.\n    // Instead, we use `@deprecated` to visualize that they shouldn’t be used.\n    /**\n     * Internal list of configured plugins.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Array<PluginTuple<Array<unknown>>>}\n     */\n    this.attachers = []\n\n    /**\n     * Compiler to use.\n     *\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.compiler = undefined\n\n    /**\n     * Internal state to track where we are while freezing.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {number}\n     */\n    this.freezeIndex = -1\n\n    /**\n     * Internal state to track whether we’re frozen.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {boolean | undefined}\n     */\n    this.frozen = undefined\n\n    /**\n     * Internal state.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Data}\n     */\n    this.namespace = {}\n\n    /**\n     * Parser to use.\n     *\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.parser = undefined\n\n    /**\n     * Internal list of configured transformers.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Pipeline}\n     */\n    this.transformers = trough()\n  }\n\n  /**\n   * Copy a processor.\n   *\n   * @deprecated\n   *   This is a private internal method and should not be used.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   New *unfrozen* processor ({@link Processor `Processor`}) that is\n   *   configured to work the same as its ancestor.\n   *   When the descendant processor is configured in the future it does not\n   *   affect the ancestral processor.\n   */\n  copy() {\n    // Cast as the type parameters will be the same after attaching.\n    const destination =\n      /** @type {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>} */ (\n        new Processor()\n      )\n    let index = -1\n\n    while (++index < this.attachers.length) {\n      const attacher = this.attachers[index]\n      destination.use(...attacher)\n    }\n\n    destination.data(extend(true, {}, this.namespace))\n\n    return destination\n  }\n\n  /**\n   * Configure the processor with info available to all plugins.\n   * Information is stored in an object.\n   *\n   * Typically, options can be given to a specific plugin, but sometimes it\n   * makes sense to have information shared with several plugins.\n   * For example, a list of HTML elements that are self-closing, which is\n   * needed during all phases.\n   *\n   * > 👉 **Note**: setting information cannot occur on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * > 👉 **Note**: to register custom data in TypeScript, augment the\n   * > {@link Data `Data`} interface.\n   *\n   * @example\n   *   This example show how to get and set info:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   const processor = unified().data('alpha', 'bravo')\n   *\n   *   processor.data('alpha') // => 'bravo'\n   *\n   *   processor.data() // => {alpha: 'bravo'}\n   *\n   *   processor.data({charlie: 'delta'})\n   *\n   *   processor.data() // => {charlie: 'delta'}\n   *   ```\n   *\n   * @template {keyof Data} Key\n   *\n   * @overload\n   * @returns {Data}\n   *\n   * @overload\n   * @param {Data} dataset\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Key} key\n   * @returns {Data[Key]}\n   *\n   * @overload\n   * @param {Key} key\n   * @param {Data[Key]} value\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @param {Data | Key} [key]\n   *   Key to get or set, or entire dataset to set, or nothing to get the\n   *   entire dataset (optional).\n   * @param {Data[Key]} [value]\n   *   Value to set (optional).\n   * @returns {unknown}\n   *   The current processor when setting, the value at `key` when getting, or\n   *   the entire dataset when getting without key.\n   */\n  data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', this.frozen)\n        this.namespace[key] = value\n        return this\n      }\n\n      // Get `key`.\n      return (own.call(this.namespace, key) && this.namespace[key]) || undefined\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', this.frozen)\n      this.namespace = key\n      return this\n    }\n\n    // Get space.\n    return this.namespace\n  }\n\n  /**\n   * Freeze a processor.\n   *\n   * Frozen processors are meant to be extended and not to be configured\n   * directly.\n   *\n   * When a processor is frozen it cannot be unfrozen.\n   * New processors working the same way can be created by calling the\n   * processor.\n   *\n   * It’s possible to freeze processors explicitly by calling `.freeze()`.\n   * Processors freeze automatically when `.parse()`, `.run()`, `.runSync()`,\n   * `.stringify()`, `.process()`, or `.processSync()` are called.\n   *\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   The current processor.\n   */\n  freeze() {\n    if (this.frozen) {\n      return this\n    }\n\n    // Cast so that we can type plugins easier.\n    // Plugins are supposed to be usable on different processors, not just on\n    // this exact processor.\n    const self = /** @type {Processor} */ (/** @type {unknown} */ (this))\n\n    while (++this.freezeIndex < this.attachers.length) {\n      const [attacher, ...options] = this.attachers[this.freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      const transformer = attacher.call(self, ...options)\n\n      if (typeof transformer === 'function') {\n        this.transformers.use(transformer)\n      }\n    }\n\n    this.frozen = true\n    this.freezeIndex = Number.POSITIVE_INFINITY\n\n    return this\n  }\n\n  /**\n   * Parse text to a syntax tree.\n   *\n   * > 👉 **Note**: `parse` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `parse` performs the parse phase, not the run phase or other\n   * > phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   file to parse (optional); typically `string` or `VFile`; any value\n   *   accepted as `x` in `new VFile(x)`.\n   * @returns {ParseTree extends undefined ? Node : ParseTree}\n   *   Syntax tree representing `file`.\n   */\n  parse(file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const parser = this.parser || this.Parser\n    assertParser('parse', parser)\n    return parser(String(realFile), realFile)\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * > 👉 **Note**: `process` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `process` performs the parse, run, and stringify phases.\n   *\n   * @overload\n   * @param {Compatible | undefined} file\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<VFileWithOutput<CompileResult>>}\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`]; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>> | undefined} [done]\n   *   Callback (optional).\n   * @returns {Promise<VFile> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise a promise, rejected with a fatal error or resolved with the\n   *   processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > 👉 **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@link CompileResultMap `CompileResultMap`}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  process(file, done) {\n    const self = this\n\n    this.freeze()\n    assertParser('process', this.parser || this.Parser)\n    assertCompiler('process', this.compiler || this.Compiler)\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {((file: VFileWithOutput<CompileResult>) => undefined | void) | undefined} resolve\n     * @param {(error: Error | undefined) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      const realFile = vfile(file)\n      // Assume `ParseTree` (the result of the parser) matches `HeadTree` (the\n      // input of the first transform).\n      const parseTree =\n        /** @type {HeadTree extends undefined ? Node : HeadTree} */ (\n          /** @type {unknown} */ (self.parse(realFile))\n        )\n\n      self.run(parseTree, realFile, function (error, tree, file) {\n        if (error || !tree || !file) {\n          return realDone(error)\n        }\n\n        // Assume `TailTree` (the output of the last transform) matches\n        // `CompileTree` (the input of the compiler).\n        const compileTree =\n          /** @type {CompileTree extends undefined ? Node : CompileTree} */ (\n            /** @type {unknown} */ (tree)\n          )\n\n        const compileResult = self.stringify(compileTree, file)\n\n        if (looksLikeAValue(compileResult)) {\n          file.value = compileResult\n        } else {\n          file.result = compileResult\n        }\n\n        realDone(error, /** @type {VFileWithOutput<CompileResult>} */ (file))\n      })\n\n      /**\n       * @param {Error | undefined} error\n       * @param {VFileWithOutput<CompileResult> | undefined} [file]\n       * @returns {undefined}\n       */\n      function realDone(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > 👉 **Note**: `processSync` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `processSync` performs the parse, run, and stringify phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @returns {VFileWithOutput<CompileResult>}\n   *   The processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > 👉 **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@link CompileResultMap `CompileResultMap`}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  processSync(file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {VFileWithOutput<CompileResult> | undefined} */\n    let result\n\n    this.freeze()\n    assertParser('processSync', this.parser || this.Parser)\n    assertCompiler('processSync', this.compiler || this.Compiler)\n\n    this.process(file, realDone)\n    assertDone('processSync', 'process', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n\n    return result\n\n    /**\n     * @type {ProcessCallback<VFileWithOutput<CompileResult>>}\n     */\n    function realDone(error, file) {\n      complete = true\n      bail(error)\n      result = file\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * > 👉 **Note**: `run` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `run` performs the run phase, not other phases.\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} file\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree>}\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {(\n   *   RunCallback<TailTree extends undefined ? Node : TailTree> |\n   *   Compatible\n   * )} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} [done]\n   *   Callback (optional).\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise, a promise rejected with a fatal error or resolved with the\n   *   transformed tree.\n   */\n  run(tree, file, done) {\n    assertNode(tree)\n    this.freeze()\n\n    const transformers = this.transformers\n\n    if (!done && typeof file === 'function') {\n      done = file\n      file = undefined\n    }\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {(\n     *   ((tree: TailTree extends undefined ? Node : TailTree) => undefined | void) |\n     *   undefined\n     * )} resolve\n     * @param {(error: Error) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      assert(\n        typeof file !== 'function',\n        '`file` can’t be a `done` anymore, we checked'\n      )\n      const realFile = vfile(file)\n      transformers.run(tree, realFile, realDone)\n\n      /**\n       * @param {Error | undefined} error\n       * @param {Node} outputTree\n       * @param {VFile} file\n       * @returns {undefined}\n       */\n      function realDone(error, outputTree, file) {\n        const resultingTree =\n          /** @type {TailTree extends undefined ? Node : TailTree} */ (\n            outputTree || tree\n          )\n\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(resultingTree)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, resultingTree, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > 👉 **Note**: `runSync` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `runSync` performs the run phase, not other phases.\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {TailTree extends undefined ? Node : TailTree}\n   *   Transformed tree.\n   */\n  runSync(tree, file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {(TailTree extends undefined ? Node : TailTree) | undefined} */\n    let result\n\n    this.run(tree, file, realDone)\n\n    assertDone('runSync', 'run', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n    return result\n\n    /**\n     * @type {RunCallback<TailTree extends undefined ? Node : TailTree>}\n     */\n    function realDone(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * Compile a syntax tree.\n   *\n   * > 👉 **Note**: `stringify` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `stringify` performs the stringify phase, not the run phase\n   * > or other phases.\n   *\n   * @param {CompileTree extends undefined ? Node : CompileTree} tree\n   *   Tree to compile.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {CompileResult extends undefined ? Value : CompileResult}\n   *   Textual representation of the tree (see note).\n   *\n   *   > 👉 **Note**: unified typically compiles by serializing: most compilers\n   *   > return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@link CompileResultMap `CompileResultMap`}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  stringify(tree, file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const compiler = this.compiler || this.Compiler\n    assertCompiler('stringify', compiler)\n    assertNode(tree)\n\n    return compiler(tree, realFile)\n  }\n\n  /**\n   * Configure the processor to use a plugin, a list of usable values, or a\n   * preset.\n   *\n   * If the processor is already using a plugin, the previous plugin\n   * configuration is changed based on the options that are passed in.\n   * In other words, the plugin is not added a second time.\n   *\n   * > 👉 **Note**: `use` cannot be called on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * @example\n   *   There are many ways to pass plugins to `.use()`.\n   *   This example gives an overview:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   unified()\n   *     // Plugin with options:\n   *     .use(pluginA, {x: true, y: true})\n   *     // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):\n   *     .use(pluginA, {y: false, z: true})\n   *     // Plugins:\n   *     .use([pluginB, pluginC])\n   *     // Two plugins, the second with options:\n   *     .use([pluginD, [pluginE, {}]])\n   *     // Preset with plugins and settings:\n   *     .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})\n   *     // Settings only:\n   *     .use({settings: {position: false}})\n   *   ```\n   *\n   * @template {Array<unknown>} [Parameters=[]]\n   * @template {Node | string | undefined} [Input=undefined]\n   * @template [Output=Input]\n   *\n   * @overload\n   * @param {Preset | null | undefined} [preset]\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {PluggableList} list\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Plugin<Parameters, Input, Output>} plugin\n   * @param {...(Parameters | [boolean])} parameters\n   * @returns {UsePlugin<ParseTree, HeadTree, TailTree, CompileTree, CompileResult, Input, Output>}\n   *\n   * @param {PluggableList | Plugin | Preset | null | undefined} value\n   *   Usable value.\n   * @param {...unknown} parameters\n   *   Parameters, when a plugin is given as a usable value.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   Current processor.\n   */\n  use(value, ...parameters) {\n    const attachers = this.attachers\n    const namespace = this.namespace\n\n    assertUnfrozen('use', this.frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, parameters)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    return this\n\n    /**\n     * @param {Pluggable} value\n     * @returns {undefined}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value, [])\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...parameters] =\n            /** @type {PluginTuple<Array<unknown>>} */ (value)\n          addPlugin(plugin, parameters)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {undefined}\n     */\n    function addPreset(result) {\n      if (!('plugins' in result) && !('settings' in result)) {\n        throw new Error(\n          'Expected usable value but received an empty preset, which is probably a mistake: presets typically come with `plugins` and sometimes with `settings`, but this has neither'\n        )\n      }\n\n      addList(result.plugins)\n\n      if (result.settings) {\n        namespace.settings = extend(true, namespace.settings, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList | null | undefined} plugins\n     * @returns {undefined}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {Array<unknown>} parameters\n     * @returns {undefined}\n     */\n    function addPlugin(plugin, parameters) {\n      let index = -1\n      let entryIndex = -1\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entryIndex = index\n          break\n        }\n      }\n\n      if (entryIndex === -1) {\n        attachers.push([plugin, ...parameters])\n      }\n      // Only set if there was at least a `primary` value, otherwise we’d change\n      // `arguments.length`.\n      else if (parameters.length > 0) {\n        let [primary, ...rest] = parameters\n        const currentPrimary = attachers[entryIndex][1]\n        if (isPlainObj(currentPrimary) && isPlainObj(primary)) {\n          primary = extend(true, currentPrimary, primary)\n        }\n\n        attachers[entryIndex] = [plugin, primary, ...rest]\n      }\n    }\n  }\n}\n\n// Note: this returns a *callable* instance.\n// That’s why it’s documented as a function.\n/**\n * Create a new processor.\n *\n * @example\n *   This example shows how a new processor can be created (from `remark`) and linked\n *   to **stdin**(4) and **stdout**(4).\n *\n *   ```js\n *   import process from 'node:process'\n *   import concatStream from 'concat-stream'\n *   import {remark} from 'remark'\n *\n *   process.stdin.pipe(\n *     concatStream(function (buf) {\n *       process.stdout.write(String(remark().processSync(buf)))\n *     })\n *   )\n *   ```\n *\n * @returns\n *   New *unfrozen* processor (`processor`).\n *\n *   This processor is configured to work the same as its ancestor.\n *   When the descendant processor is configured in the future it does not\n *   affect the ancestral processor.\n */\nexport const unified = new Processor().freeze()\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is Value}\n */\nfunction looksLikeAValue(value) {\n  return typeof value === 'string' || isUint8Array(value)\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","// Register `Raw` in tree:\n/// <reference types=\"mdast-util-to-hast\" />\n\n/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Parents} Parents\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast-util-to-jsx-runtime').Components} JsxRuntimeComponents\n * @typedef {import('remark-rehype').Options} RemarkRehypeOptions\n * @typedef {import('unist-util-visit').BuildVisitor<Root>} Visitor\n * @typedef {import('unified').PluggableList} PluggableList\n */\n\n/**\n * @callback AllowElement\n *   Filter elements.\n * @param {Readonly<Element>} element\n *   Element to check.\n * @param {number} index\n *   Index of `element` in `parent`.\n * @param {Readonly<Parents> | undefined} parent\n *   Parent of `element`.\n * @returns {boolean | null | undefined}\n *   Whether to allow `element` (default: `false`).\n *\n * @typedef {Partial<JsxRuntimeComponents>} Components\n *   Map tag names to components.\n *\n * @typedef Deprecation\n *   Deprecation.\n * @property {string} from\n *   Old field.\n * @property {string} id\n *   ID in readme.\n * @property {keyof Options} [to]\n *   New field.\n *\n * @typedef Options\n *   Configuration.\n * @property {AllowElement | null | undefined} [allowElement]\n *   Filter elements (optional);\n *   `allowedElements` / `disallowedElements` is used first.\n * @property {ReadonlyArray<string> | null | undefined} [allowedElements]\n *   Tag names to allow (default: all tag names);\n *   cannot combine w/ `disallowedElements`.\n * @property {string | null | undefined} [children]\n *   Markdown.\n * @property {string | null | undefined} [className]\n *   Wrap in a `div` with this class name.\n * @property {Components | null | undefined} [components]\n *   Map tag names to components.\n * @property {ReadonlyArray<string> | null | undefined} [disallowedElements]\n *   Tag names to disallow (default: `[]`);\n *   cannot combine w/ `allowedElements`.\n * @property {PluggableList | null | undefined} [rehypePlugins]\n *   List of rehype plugins to use.\n * @property {PluggableList | null | undefined} [remarkPlugins]\n *   List of remark plugins to use.\n * @property {Readonly<RemarkRehypeOptions> | null | undefined} [remarkRehypeOptions]\n *   Options to pass through to `remark-rehype`.\n * @property {boolean | null | undefined} [skipHtml=false]\n *   Ignore HTML in markdown completely (default: `false`).\n * @property {boolean | null | undefined} [unwrapDisallowed=false]\n *   Extract (unwrap) what’s in disallowed elements (default: `false`);\n *   normally when say `strong` is not allowed, it and it’s children are dropped,\n *   with `unwrapDisallowed` the element itself is replaced by its children.\n * @property {UrlTransform | null | undefined} [urlTransform]\n *   Change URLs (default: `defaultUrlTransform`)\n *\n * @callback UrlTransform\n *   Transform all URLs.\n * @param {string} url\n *   URL.\n * @param {string} key\n *   Property name (example: `'href'`).\n * @param {Readonly<Element>} node\n *   Node.\n * @returns {string | null | undefined}\n *   Transformed URL (optional).\n */\n\nimport {unreachable} from 'devlop'\nimport {toJsxRuntime} from 'hast-util-to-jsx-runtime'\nimport {urlAttributes} from 'html-url-attributes'\nimport {sanitizeUri} from 'micromark-util-sanitize-uri'\n// @ts-expect-error: untyped.\nimport {Fragment, jsx, jsxs} from 'react/jsx-runtime'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport {unified} from 'unified'\nimport {visit} from 'unist-util-visit'\nimport {VFile} from 'vfile'\n\nconst own = {}.hasOwnProperty\nconst changelog =\n  'https://github.com/remarkjs/react-markdown/blob/main/changelog.md'\n\n/** @type {PluggableList} */\nconst emptyPlugins = []\n/** @type {Readonly<RemarkRehypeOptions>} */\nconst emptyRemarkRehypeOptions = {allowDangerousHtml: true}\nconst safeProtocol = /^(https?|ircs?|mailto|xmpp)$/i\n\n// Mutable because we `delete` any time it’s used and a message is sent.\n/** @type {ReadonlyArray<Readonly<Deprecation>>} */\nconst deprecations = [\n  {from: 'astPlugins', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'allowDangerousHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {\n    from: 'allowNode',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowElement'\n  },\n  {\n    from: 'allowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowedElements'\n  },\n  {\n    from: 'disallowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'disallowedElements'\n  },\n  {from: 'escapeHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'includeElementIndex', id: '#remove-includeelementindex'},\n  {\n    from: 'includeNodeIndex',\n    id: 'change-includenodeindex-to-includeelementindex'\n  },\n  {from: 'linkTarget', id: 'remove-linktarget'},\n  {from: 'plugins', id: 'change-plugins-to-remarkplugins', to: 'remarkPlugins'},\n  {from: 'rawSourcePos', id: '#remove-rawsourcepos'},\n  {from: 'renderers', id: 'change-renderers-to-components', to: 'components'},\n  {from: 'source', id: 'change-source-to-children', to: 'children'},\n  {from: 'sourcePos', id: '#remove-sourcepos'},\n  {from: 'transformImageUri', id: '#add-urltransform', to: 'urlTransform'},\n  {from: 'transformLinkUri', id: '#add-urltransform', to: 'urlTransform'}\n]\n\n/**\n * Component to render markdown.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {JSX.Element}\n *   React element.\n */\nexport function Markdown(options) {\n  const allowedElements = options.allowedElements\n  const allowElement = options.allowElement\n  const children = options.children || ''\n  const className = options.className\n  const components = options.components\n  const disallowedElements = options.disallowedElements\n  const rehypePlugins = options.rehypePlugins || emptyPlugins\n  const remarkPlugins = options.remarkPlugins || emptyPlugins\n  const remarkRehypeOptions = options.remarkRehypeOptions\n    ? {...options.remarkRehypeOptions, ...emptyRemarkRehypeOptions}\n    : emptyRemarkRehypeOptions\n  const skipHtml = options.skipHtml\n  const unwrapDisallowed = options.unwrapDisallowed\n  const urlTransform = options.urlTransform || defaultUrlTransform\n\n  const processor = unified()\n    .use(remarkParse)\n    .use(remarkPlugins)\n    .use(remarkRehype, remarkRehypeOptions)\n    .use(rehypePlugins)\n\n  const file = new VFile()\n\n  if (typeof children === 'string') {\n    file.value = children\n  } else {\n    unreachable(\n      'Unexpected value `' +\n        children +\n        '` for `children` prop, expected `string`'\n    )\n  }\n\n  if (allowedElements && disallowedElements) {\n    unreachable(\n      'Unexpected combined `allowedElements` and `disallowedElements`, expected one or the other'\n    )\n  }\n\n  for (const deprecation of deprecations) {\n    if (Object.hasOwn(options, deprecation.from)) {\n      unreachable(\n        'Unexpected `' +\n          deprecation.from +\n          '` prop, ' +\n          (deprecation.to\n            ? 'use `' + deprecation.to + '` instead'\n            : 'remove it') +\n          ' (see <' +\n          changelog +\n          '#' +\n          deprecation.id +\n          '> for more info)'\n      )\n    }\n  }\n\n  const mdastTree = processor.parse(file)\n  /** @type {Nodes} */\n  let hastTree = processor.runSync(mdastTree, file)\n\n  // Wrap in `div` if there’s a class name.\n  if (className) {\n    hastTree = {\n      type: 'element',\n      tagName: 'div',\n      properties: {className},\n      // Assume no doctypes.\n      children: /** @type {Array<ElementContent>} */ (\n        hastTree.type === 'root' ? hastTree.children : [hastTree]\n      )\n    }\n  }\n\n  visit(hastTree, transform)\n\n  return toJsxRuntime(hastTree, {\n    Fragment,\n    components,\n    ignoreInvalidStyle: true,\n    jsx,\n    jsxs,\n    passKeys: true,\n    passNode: true\n  })\n\n  /** @type {Visitor} */\n  function transform(node, index, parent) {\n    if (node.type === 'raw' && parent && typeof index === 'number') {\n      if (skipHtml) {\n        parent.children.splice(index, 1)\n      } else {\n        parent.children[index] = {type: 'text', value: node.value}\n      }\n\n      return index\n    }\n\n    if (node.type === 'element') {\n      /** @type {string} */\n      let key\n\n      for (key in urlAttributes) {\n        if (own.call(urlAttributes, key) && own.call(node.properties, key)) {\n          const value = node.properties[key]\n          const test = urlAttributes[key]\n          if (test === null || test.includes(node.tagName)) {\n            node.properties[key] = urlTransform(String(value || ''), key, node)\n          }\n        }\n      }\n    }\n\n    if (node.type === 'element') {\n      let remove = allowedElements\n        ? !allowedElements.includes(node.tagName)\n        : disallowedElements\n        ? disallowedElements.includes(node.tagName)\n        : false\n\n      if (!remove && allowElement && typeof index === 'number') {\n        remove = !allowElement(node, index, parent)\n      }\n\n      if (remove && parent && typeof index === 'number') {\n        if (unwrapDisallowed && node.children) {\n          parent.children.splice(index, 1, ...node.children)\n        } else {\n          parent.children.splice(index, 1)\n        }\n\n        return index\n      }\n    }\n  }\n}\n\n/**\n * Make a URL safe.\n *\n * @satisfies {UrlTransform}\n * @param {string} value\n *   URL.\n * @returns {string}\n *   Safe URL.\n */\nexport function defaultUrlTransform(value) {\n  return sanitizeUri(value, safeProtocol)\n}\n","import React, { useEffect, useState } from \"react\";\n\nimport Button from \"../components/Button\";\nimport HoverImg from \"./HoverImg\";\nimport { processInfo } from \"../utils/processInfo\";\nimport Markdown from \"react-markdown\";\n\ninterface galleryItem {\n  imgUrl: string,\n  info: string,\n  blockStyles: string,\n  imgStyles: string,\n}\n\n\nconst InfoDepart = ({infoObject}: any) => {\n\n  const [data, setData] = useState<galleryItem[]>([]);\n\n  const getProjectInfo = async () => {\n    const dataResponse: any = await processInfo(\"departmentgalleries\");\n\n    const dataFormatted = dataResponse.data.map((item: any) => ({\n      info: item.attributes.info,\n      imgUrl: item.attributes.image.data.attributes.url,\n      blockStyles: item.attributes.blockstyles,\n      imgStyles: item.attributes.imgstyles,\n    }))\n\n    setData(dataFormatted);\n  }\n\n  useEffect(() => {\n    getProjectInfo();\n  }, []);\n\n\n  const handleCustomClick = (event: string) => {\n    console.log(\"custom click: \", event);\n  };\n\n  return (\n    <>\n      <div className=\"container mx-auto px-6 lg:px-0\">\n        <div className=\"flex flex-col lg:flex-row items-start\">\n          <div className=\"w-full lg:w-4/12 lg:sticky lg:!top-40\">\n            <div>\n              <div className=\"pb-10\">\n                <p className=\"text-[--color-secondary] font-light\">{infoObject.project}</p>\n                <h2 className=\"text-[--color-secondary] text-[30px] lg:text-[44px] uppercase leading-none\">\n                  {infoObject.infoTitle}\n                </h2>\n                <p className=\"text-[--color-secondary] text-xl\">\n                  {infoObject.infoDirection}\n                </p>\n              </div>\n              <div className=\"pb-5 text-[--color-secondary] font-light markdown-container\">\n                {/* <p className=\"text-[--color-secondary] font-light pb-4\">\n                  TOP LIFE - Juan de Aliaga es un edificio multifamiliar,\n                  ubicado en Magdalena del Mar, de 22 pisos, con azotea y 5\n                  sótanos. Ofrecemos 84 departamentos de 1, 2 y 3 dormitorios y\n                  sólo 4 departamentos por piso.\n                </p>\n                <p className=\"text-[--color-secondary] font-light\">\n                  Conoce más sobre nuestro nuevo proyecto en etapa de pre\n                  lanzamiento.\n                </p> */}\n                <Markdown>{infoObject.paragraphs}</Markdown>\n              </div>\n              <Button\n                label={\"VER PROYECTO\"}\n                extraStyles=\"btn-primary px-10 h-[50px]\"\n                customClick={(event) => handleCustomClick(event)}\n              />\n            </div>\n          </div>\n          <div className=\"w-full lg:w-8/12 lg:pl-10 pt-10 lg:pt-0\">\n            <div className=\"grid grid-cols-10 md:grid-cols-6 gap-6\">\n              {data.map((item, index) => (\n                <HoverImg key={index} imgUrl={item.imgUrl} info={item.info} blockStyles={item.blockStyles} imgStyles={item.imgStyles} />\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default InfoDepart;\n","import react, { useEffect, useState } from \"react\";\nimport type { HeadFC, PageProps } from \"gatsby\";\nimport Header from \"../components/Header\";\nimport Footer from \"../components/Footer\";\n\nimport BannerDepart from \"../components/BannerDepart\";\nimport TitleFix from \"../components/TitleFix\";\nimport InfoDepart from \"../components/InfoDepart\";\nimport { processInfo } from \"../utils/processInfo\";\nimport React from \"react\";\n\nexport interface depaItem {\n  title: string,\n  text: string,\n  bannerDepartment: string,\n  logo: string,\n  direction: string,\n  nocuartos: string,\n  area: string,\n  btn: string,\n  link: string,\n  project: string,\n  infoTitle: string,\n  infoDirection: string,\n  label: string,\n  infolink: string,\n  paragraphs: string,\n  linkSubscription: string,\n}\n\nconst Department: React.FC<PageProps> = () => {\n\n  const [data, setData] = useState<depaItem>();\n\n  const getProjectInfo = async () => {\n    const dataResponse: any = await processInfo(\"departments\");\n\n    const dataFormatted = dataResponse.data.map((item: any) => ({\n      title: item.attributes.title,\n      text: item.attributes.text,\n      bannerDepartment: item.attributes.bannerdepartment.data.attributes.url,\n      logo: item.attributes.logotoplife.data.attributes.url,\n      direction: item.attributes.direccion,\n      nocuartos: item.attributes.nocuartos,\n      area: item.attributes.area,\n      btn: item.attributes.btn,\n      link: item.attributes.link,\n      project: item.attributes.proyecto,\n      infoTitle: item.attributes.infotitle,\n      infoDirection: item.attributes.infodirection,\n      label: item.attributes.label,\n      infolink: item.attributes.infolink || \"\",\n      paragraphs: item.attributes.paragraphs,\n      linkSubscription: item.attributes.linksuscription || \"\",\n    }))\n\n    setData(dataFormatted[0]);\n  }\n\n  useEffect(() => {\n    getProjectInfo();\n  }, []);\n\n  return (\n    <>\n      <Header />\n      <section className=\"pt-28 md:pt-36 lg:sticky top-0\">\n        <TitleFix extraStyles=\"md:w-8/12 lg:w-5/12\" title={data?.title || \"\"} text={data?.text || \"\"} />\n      </section>\n\n      <section className=\"relative\">\n        {\n          data !== undefined && <BannerDepart objectDepa={data}  />\n        }\n      </section>\n\n      <section className=\"bg-white relative pt-20 md:pt-[146px] pb-28\">\n        {\n          data !== undefined && <InfoDepart infoObject={data} />\n        }\n      </section>\n\n      <Footer />\n    </>\n  );\n};\n\nexport default Department;\n\nexport const Head: HeadFC = () => <title>Val - Multifamiliares</title>;\n","// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function(style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function(node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n","var parse = require('inline-style-parser');\n\n/**\n * Parses inline style to object.\n *\n * @example\n * // returns { 'line-height': '42' }\n * StyleToObject('line-height: 42;');\n *\n * @param  {String}      style      - The inline style.\n * @param  {Function}    [iterator] - The iterator function.\n * @return {null|Object}\n */\nfunction StyleToObject(style, iterator) {\n  var output = null;\n  if (!style || typeof style !== 'string') {\n    return output;\n  }\n\n  var declaration;\n  var declarations = parse(style);\n  var hasIterator = typeof iterator === 'function';\n  var property;\n  var value;\n\n  for (var i = 0, len = declarations.length; i < len; i++) {\n    declaration = declarations[i];\n    property = declaration.property;\n    value = declaration.value;\n\n    if (hasIterator) {\n      iterator(property, value, declaration);\n    } else if (value) {\n      output || (output = {});\n      output[property] = value;\n    }\n  }\n\n  return output;\n}\n\nmodule.exports = StyleToObject;\nmodule.exports.default = StyleToObject; // ESM support\n"],"names":["module","exports","e","t","o","n","i","id","loaded","call","m","c","p","__esModule","default","Object","assign","arguments","length","prototype","hasOwnProperty","a","u","s","d","b","y","h","w","k","x","offset","delay","easing","duration","disable","once","startEvent","throttleDelay","debounceDelay","disableMutationObserver","j","O","M","forEach","node","removeAttribute","S","mobile","phone","tablet","_","document","all","window","atob","isSupported","console","info","querySelector","setAttribute","indexOf","readyState","addEventListener","ready","init","refresh","refreshHard","v","g","apply","r","setTimeout","f","l","clearTimeout","this","TypeError","leading","maxWait","trailing","cancel","flush","valueOf","replace","test","slice","Symbol","iterator","constructor","NaN","parseInt","self","Function","toString","Math","max","min","Date","now","dataset","aos","children","MutationObserver","WebKitMutationObserver","MozMutationObserver","observe","documentElement","childList","subtree","removedNodes","Array","addedNodes","concat","defineProperty","value","navigator","userAgent","vendor","opera","enumerable","configurable","writable","key","substr","getAttribute","position","classList","add","remove","pageYOffset","innerHeight","anchor","anchorPlacement","isNaN","querySelectorAll","top","offsetHeight","offsetLeft","offsetTop","tagName","scrollLeft","scrollTop","offsetParent","left","map","hasOwn","toStr","gOPD","getOwnPropertyDescriptor","isArray","arr","isPlainObject","obj","hasOwnConstructor","hasIsPrototypeOf","setProperty","target","options","name","newValue","getProperty","extend","src","copy","copyIsArray","clone","deep","_ref","title","text","extraStyles","React","className","objectDepa","bannerDepartment","alt","logo","LinkedIn","color","height","width","dangerouslySetInnerHTML","__html","direction","nocuartos","area","Button","label","btn","customClick","event","log","handleCustomClick","imgUrl","imgStyles","blockStyles","useEffect","AOS","re","empty","Schema","property","normal","space","merge","definitions","index","normalize","toLowerCase","Info","attribute","boolean","booleanish","overloadedBoolean","number","commaSeparated","spaceSeparated","commaOrSpaceSeparated","mustUseProperty","defined","powers","increment","checks","keys","DefinedInfo","mask","super","mark","check","values","own","create","definition","prop","properties","transform","attributes","includes","xlink","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xml","xmlLang","xmlBase","xmlSpace","caseSensitiveTransform","caseInsensitiveTransform","xmlns","xmlnsxlink","xmlnsXLink","aria","ariaActiveDescendant","ariaAtomic","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaControls","ariaCurrent","ariaDescribedBy","ariaDetails","ariaDisabled","ariaDropEffect","ariaErrorMessage","ariaExpanded","ariaFlowTo","ariaGrabbed","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabel","ariaLabelledBy","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaOwns","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","role","html","acceptcharset","classname","htmlfor","httpequiv","abbr","accept","acceptCharset","accessKey","action","allow","allowFullScreen","allowPaymentRequest","allowUserMedia","as","async","autoCapitalize","autoComplete","autoFocus","autoPlay","blocking","capture","charSet","checked","cite","cols","colSpan","content","contentEditable","controls","controlsList","coords","crossOrigin","data","dateTime","decoding","defer","dir","dirName","disabled","download","draggable","encType","enterKeyHint","fetchPriority","form","formAction","formEncType","formMethod","formNoValidate","formTarget","headers","hidden","high","href","hrefLang","htmlFor","httpEquiv","imageSizes","imageSrcSet","inert","inputMode","integrity","is","isMap","itemId","itemProp","itemRef","itemScope","itemType","kind","lang","language","list","loading","loop","low","manifest","maxLength","media","method","minLength","multiple","muted","nonce","noModule","noValidate","onAbort","onAfterPrint","onAuxClick","onBeforeMatch","onBeforePrint","onBeforeUnload","onBlur","onCancel","onCanPlay","onCanPlayThrough","onChange","onClick","onClose","onContextLost","onContextMenu","onContextRestored","onCopy","onCueChange","onCut","onDblClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onDurationChange","onEmptied","onEnded","onError","onFocus","onFormData","onHashChange","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onLanguageChange","onLoad","onLoadedData","onLoadedMetadata","onLoadEnd","onLoadStart","onMessage","onMessageError","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onOffline","onOnline","onPageHide","onPageShow","onPaste","onPause","onPlay","onPlaying","onPopState","onProgress","onRateChange","onRejectionHandled","onReset","onResize","onScroll","onScrollEnd","onSecurityPolicyViolation","onSeeked","onSeeking","onSelect","onSlotChange","onStalled","onStorage","onSubmit","onSuspend","onTimeUpdate","onToggle","onUnhandledRejection","onUnload","onVolumeChange","onWaiting","onWheel","open","optimum","pattern","ping","placeholder","playsInline","popover","popoverTarget","popoverTargetAction","poster","preload","readOnly","referrerPolicy","rel","required","reversed","rows","rowSpan","sandbox","scope","scoped","seamless","selected","shape","size","sizes","slot","span","spellCheck","srcDoc","srcLang","srcSet","start","step","style","tabIndex","translate","type","typeMustMatch","useMap","wrap","align","aLink","archive","axis","background","bgColor","border","borderColor","bottomMargin","cellPadding","cellSpacing","char","charOff","classId","clear","code","codeBase","codeType","compact","declare","face","frame","frameBorder","hSpace","leftMargin","link","longDesc","lowSrc","marginHeight","marginWidth","noResize","noHref","noShade","noWrap","object","profile","prompt","rev","rightMargin","rules","scheme","scrolling","standby","summary","topMargin","valueType","version","vAlign","vLink","vSpace","allowTransparency","autoCorrect","autoSave","disablePictureInPicture","disableRemotePlayback","prefix","results","security","unselectable","svg","accentHeight","alignmentBaseline","arabicForm","baselineShift","capHeight","clipPath","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","dataType","dominantBaseline","enableBackground","fillOpacity","fillRule","floodColor","floodOpacity","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","horizAdvX","horizOriginX","horizOriginY","imageRendering","letterSpacing","lightingColor","markerEnd","markerMid","markerStart","navDown","navDownLeft","navDownRight","navLeft","navNext","navPrev","navRight","navUp","navUpLeft","navUpRight","onActivate","onBegin","onEnd","onFocusIn","onFocusOut","onMouseWheel","onRepeat","onShow","onZoom","overlinePosition","overlineThickness","paintOrder","panose1","pointerEvents","renderingIntent","shapeRendering","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeOpacity","strokeWidth","textAnchor","textDecoration","textRendering","transformOrigin","typeOf","underlinePosition","underlineThickness","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","vectorEffect","vertAdvY","vertOriginX","vertOriginY","wordSpacing","writingMode","xHeight","playbackOrder","timelineBegin","about","accumulate","additive","alphabetic","amplitude","ascent","attributeName","attributeType","azimuth","bandwidth","baseFrequency","baseProfile","bbox","begin","bias","by","calcMode","clip","clipPathUnits","contentScriptType","contentStyleType","cursor","cx","cy","defaultAction","descent","diffuseConstant","display","dur","divisor","dx","dy","edgeMode","editable","elevation","end","exponent","externalResourcesRequired","fill","filter","filterRes","filterUnits","focusable","focusHighlight","format","fr","from","fx","fy","g1","g2","glyphRef","gradientTransform","gradientUnits","handler","hanging","hatchContentUnits","hatchUnits","ideographic","initialVisibility","in","in2","intercept","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","kerning","lengthAdjust","limitingConeAngle","local","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","mathematical","mediaCharacterEncoding","mediaContentEncodings","mediaSize","mediaTime","mode","numOctaves","observer","opacity","operator","order","orient","orientation","origin","overflow","overlay","path","pathLength","patternContentUnits","patternTransform","patternUnits","phase","pitch","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","propagate","radius","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","requiredFonts","requiredFormats","resource","restart","result","rotate","rx","ry","scale","seed","side","slope","snapshotTime","specularConstant","specularExponent","spreadMethod","spacing","startOffset","stdDeviation","stemh","stemv","stitchTiles","string","stroke","surfaceScale","syncBehavior","syncBehaviorDefault","syncMaster","syncTolerance","syncToleranceDefault","systemLanguage","tableValues","targetX","targetY","textLength","transformBehavior","to","u1","u2","unicode","viewBox","viewTarget","visibility","widths","x1","x2","xChannelSelector","y1","y2","yChannelSelector","z","zoomAndPan","valid","dash","cap","kebab","$0","camelcase","charAt","toUpperCase","hastToReact","pointEnd","point","pointStart","line","column","undefined","stringifyPosition","pos","VFileMessage","Error","causeOrReason","optionsOrParentOrPlace","reason","legacyCause","place","ancestors","cause","message","ruleId","source","parent","fatal","file","stack","actual","expected","note","url","emptyMap","Map","dashSomething","tableElements","Set","tableCellElement","toJsxRuntime","tree","Fragment","filePath","development","jsxDEV","props","isStaticChildren","columnNumber","fileName","lineNumber","developmentCreate","jsx","jsxs","fn","productionCreate","state","components","elementAttributeNameCase","ignoreInvalidStyle","passKeys","passNode","schema","stylePropertyNameCase","tableCellAlignToStyle","one","parentSchema","push","countsByTagName","child","count","get","set","createChildren","alignValue","createProperty","has","createProperties","pop","thing","Type","rest","dashes","find","Number","settings","join","padRight","padLeft","trim","styleObject","replacer","error","toCamel","parseStyle","String","domCasing","cssCasing","transformStyleToCssCasing","transformStylesToCssCasing","toDash","$1","urlAttributes","icon","unicodePunctuationInternal","regexCheck","asciiAlpha","asciiAlphanumeric","asciiAtext","asciiControl","asciiDigit","asciiHexDigit","asciiPunctuation","markdownLineEnding","markdownLineEndingOrSpace","markdownSpace","unicodeWhitespace","regex","fromCharCode","characterReferences","sanitizeUri","protocol","encode","normalizeUri","colon","questionMark","numberSign","slash","skip","charCodeAt","next","encodeURIComponent","emptyOptions","includeImageAlt","includeHtml","Boolean","splice","items","parameters","chunkStart","unshift","subtokenize","events","jumps","lineIndex","otherIndex","otherEvent","subevents","more","_tokenizer","_isInFirstContentOfListItem","contentType","subcontent","_container","eventIndex","token","context","startPosition","startPositions","tokenizer","parser","childEvents","gaps","stream","previous","current","adjust","breaks","sliceStream","defineSkip","_gfmTasklistFirstContentOfListItem","write","syntaxExtension","extension","hook","right","constructs","existing","before","factorySpace","effects","ok","limit","POSITIVE_INFINITY","enter","consume","exit","tokenize","contentStart","attempt","contentInitial","lineStart","childFlow","childToken","lineStartOffset","continued","item","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","containerContinue","flow","flowContinue","writeToChild","eof","seen","entry","nok","null","blankLine","after","partial","chunkInside","contentEnd","continuationConstruct","contentContinue","resolve","prefixed","tail","sliceSerialize","initial","flowInitial","afterConstruct","resolver","resolveAll","createResolver","initializeFactory","field","notText","atBreak","resolveAllLineSuffixes","extraResolver","chunks","tabs","bufferIndex","chunk","_index","_bufferIndex","called","createTokenizer","initialize","columnStart","resolveAllConstructs","consumed","accountForPotentialSkip","fields","constructFactory","construct","addResult","onsuccessfulcheck","expandTabs","atTab","serializeChunks","main","expectedCode","startIndex","startBufferIndex","endIndex","endBufferIndex","view","head","shift","sliceChunks","chunkIndex","go","restore","onreturn","returnState","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","def","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","resolveTo","thematicBreak","marker","sequence","initialSize","atMarker","inside","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","notBlank","furtherBlankLines","notInCurrentItem","indentConstruct","blockQuote","contBefore","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","enclosedBefore","raw","enclosed","enclosedEscape","rawEscape","factoryLabel","markerType","labelInside","labelEscape","factoryTitle","escape","factoryWhitespace","normalizeIdentifier","identifier","labelAfter","markerAfter","destinationBefore","destinationAfter","titleBefore","afterWhitespace","beforeMarker","titleAfter","titleAfterOptionalWhitespace","codeIndented","afterPrefix","furtherStart","headingAtx","sequenceOpen","sequenceFurther","setextUnderline","paragraph","heading","htmlBlockNames","htmlRawNames","htmlFlow","closingTag","buffer","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","commentOpenInside","cdataOpenInside","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationStart","blankLineBefore","continuationAfter","nonLazyContinuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","nonLazyContinuation","codeFenced","closeStart","startBefore","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","beforeSequenceOpen","infoBefore","atNonLazyBreak","metaBefore","meta","contentBefore","beforeContentChunk","contentChunk","createElement","decodeNamedCharacterReference","characterReference","innerHTML","textContent","numeric","characterEscape","lineEnding","labelEnd","labelStart","_balanced","_inactive","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","close","group","insideSpan","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","labelStartImage","classifyCharacter","unicodePunctuation","attention","attentionMarkers","_open","_close","openingSequence","closingSequence","use","nextEvents","movePoint","autolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","htmlText","instruction","tagOpen","declaration","commentEnd","comment","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelStartLink","hardBreakEscape","codeText","between","tailExitIndex","headEnterIndex","extensions","combineExtensions","search","decodeNumericCharacterReference","base","characterEscapeOrReference","decode","$2","hex","fromMarkdown","encoding","config","transforms","canContainEols","opener","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreak","hardBreakTrailing","htmlFlowData","htmlTextData","image","listItem","listItemValue","onenterlistitemvalue","listOrdered","onenterlistordered","listUnordered","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","compile","tokenStack","resume","listStack","prepareList","defaultOnError","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","_spread","and","errorHandler","onExitError","expectingFirstListItemValue","flowCodeInside","depth","setextHeadingSlurpLineEnding","codePointAt","siblings","atHardBreak","inReference","referenceType","ancestor","decodeString","fragment","characterReferenceType","ordered","spread","compiler","postprocess","atCarriageReturn","match","endPosition","TextDecoder","lastIndex","exec","ceil","preprocess","combined","remarkParse","doc","env","globalThis","deserialize","serialized","$","out","unpair","flags","RegExp","BigInt","deserializer","EMPTY","asString","shouldSkip","TYPE","serialize","json","lossy","strict","pair","toJSON","entries","toISOString","serializer","structuredClone","any","defaultFootnoteBackContent","rereferenceIndex","defaultFootnoteBackLabel","referenceIndex","convert","castFactory","tests","anyFactory","checkAsRecord","nodeAsRecord","propsFactory","typeFactory","testFunction","looksLikeANode","CONTINUE","EXIT","SKIP","visitParents","visitor","reverse","factory","parents","visit","subresult","grandparents","toResult","nodeAsParent","testOrVisitor","visitorOrReverse","maybeReverse","revert","subtype","suffix","contents","listItemLoose","tab","trimLines","last","lines","trimLine","blockquote","patch","applyData","break","delete","footnoteReference","clobberPrefix","safeId","footnoteOrder","counter","reuseCounter","footnoteCounts","dataFootnoteRef","sup","allowDangerousHtml","imageReference","definitionById","inlineCode","linkReference","loose","listLoose","root","table","firstRow","tableContent","body","tableCell","tableRow","cellIndex","cells","cell","toml","ignore","yaml","footnoteDefinition","hName","hChildren","hProperties","defaultUnknownHandler","nodes","trimMarkdownSpaceStart","toHast","footnoteById","handlers","handle","passThrough","shallow","unknownHandler","createState","foot","footnoteBackContent","footnoteBackLabel","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","listItems","backReferences","counts","dataFootnoteBackref","tailTail","dataFootnotes","footer","remarkRehype","destination","hastTree","run","bail","getPrototypeOf","toStringTag","trough","fns","pipeline","middlewareIndex","callback","output","middleware","wrapped","fnExpectsCallback","done","Promise","then","middelware","basename","ext","assertPath","seenNonSlash","firstNonSlashEnd","extIndex","dirname","unmatchedSlash","extname","startPart","startDot","preDotState","segments","joined","absolute","allowAboveRoot","lastSlashIndex","lastSegmentLength","lastSlash","dots","lastIndexOf","normalizeString","sep","JSON","stringify","proc","cwd","isUrl","fileUrlOrPath","auth","urlToPath","URL","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","VFile","isUint8Array","history","messages","stored","assertNonEmpty","assertPart","stem","fail","part","CallableInstance","proto","func","setPrototypeOf","names","getOwnPropertyNames","descriptor","Processor","Compiler","Parser","attachers","freezeIndex","frozen","namespace","transformers","attacher","assertUnfrozen","freeze","transformer","parse","realFile","vfile","assertParser","process","assertCompiler","executor","reject","parseTree","realDone","compileTree","compileResult","processSync","complete","assertDone","assertNode","outputTree","resultingTree","runSync","addPlugin","addList","addPreset","plugin","plugins","entryIndex","primary","currentPrimary","unified","asyncName","looksLikeAVFile","emptyPlugins","emptyRemarkRehypeOptions","safeProtocol","deprecations","Markdown","allowedElements","allowElement","disallowedElements","rehypePlugins","remarkPlugins","remarkRehypeOptions","skipHtml","unwrapDisallowed","urlTransform","defaultUrlTransform","processor","deprecation","mdastTree","infoObject","setData","useState","dataFormatted","processInfo","blockstyles","imgstyles","getProjectInfo","project","infoTitle","infoDirection","paragraphs","HoverImg","bannerdepartment","logotoplife","direccion","proyecto","infotitle","infodirection","infolink","linkSubscription","linksuscription","Header","TitleFix","BannerDepart","InfoDepart","Footer","Head","COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","EMPTY_STRING","str","lineno","updatePosition","Position","whitespace","errorsList","msg","err","filename","silent","comments","val","ret","decl","decls","declarations","StyleToObject","hasIterator","len"],"sourceRoot":""}